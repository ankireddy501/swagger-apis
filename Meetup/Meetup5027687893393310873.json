{
  "swagger" : "2.0",
  "info" : {
    "description" : "Headline : Meetup is an online social networking portal that facilitates offline group meetings in various localities around the world. Meetup allows members to find and join groups unified by a common interest, such as politics, books, games, movies, health, pets, careers or hobbies.",
    "version" : "v3",
    "title" : "Meetup"
  },
  "host" : "api.meetup.com",
  "basePath" : "/",
  "schemes" : [ "https" ],
  "paths" : {
    "/2/categories" : {
      "get" : {
        "summary" : "Returns a list of Meetup group categories. No required parameters",
        "description" : "Returns a list of Meetup group categories. No required param...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|member|order by recommendations for authorized member (deprecated)|\r\n|shortname|(default order) ascending|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Parameter for requesting optional response properties",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|id|Numeric identifier of the category|\r\n|name|Display name of the category|\r\n|shortname|String identifier of the category|\r\n",
            "schema" : {
              "$ref" : "#/definitions/categories"
            }
          }
        }
      }
    },
    "/2/checkin" : {
      "post" : {
        "summary" : "This method posts event checkins that can be retrieved by /2/checkins. Event attendees may check in themselves and others in the group.\r\n\r\n#Request Parameters\r\nAll of the required parameters must be supplied with the request, which must be a standard POST\r\n",
        "description" : "This method posts event checkins that can be retrieved by /2...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "attendee_member_id",
          "in" : "query",
          "description" : "Supply this parameter only when the user is checking in someone else. The currently authenticated member will be recorded as the checker while the member referenced by this parameter will appear in the member_id and member_name response fields of the checkins method",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "Event we're checking in to",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comment",
          "in" : "query",
          "description" : "Comment to attach to the checkin. When checking in someone else, this request parameter is ignored.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method responds with a \"201 Created\" status and a json or XML body consisting of the posted checkin in the same fields as the response items of the Checkins method.\r\nErrors:\r\n|||\r\n|-|\r\n|badevent|The event id does not match a valid event|\r\n|nonmember|The authenticated member is not a member of the group hosting the event|\r\n",
            "schema" : {
              "$ref" : "#/definitions/deprecatedCheckin"
            }
          }
        }
      }
    },
    "/2/checkins" : {
      "get" : {
        "summary" : "There are three ways to use this method. In all cases you should use the 'event_id' parameter:\r\n1. Use 'since_count' with 'callback' or 'since_mtime' with 'callback'.\r\n2. Use 'since_count' or 'since_mtime'.\r\n3. Use 'group_id' or 'member_id' with or without 'order'.\r\n\r\n#1\r\nThis long-polling stream can be easily consumed using JavaScript in any modern browser. Checkin notifications are received when they happen, or as soon as your script finishes handling its last notification.\r\nCheckin notification objects include these properties. This method's response is an array of zero or more of these, while Meetup's JS client calls your callback function with exactly one object.\r\n#2\r\nThis method serves checkin notifications using chunked encoding to maintian a persistent connection with a client. The connection will only be terminiated for server maintenance or a connection error. It is suitable for low-level HTTP clients rather than web browsers.\r\nThis stream includes the same JSON notification objects as its long-polling counterpart. These are served one per HTTP chunk and terminated by newlines.\r\n#3\r\nThis method returns checkins for an event. To post checkins, see /2/checkin.\r\nFor private groups, the authenticated user must be a member to see checkins.\r\n",
        "description" : "There are three ways to use this method. In all cases you sh...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "callback",
          "in" : "query",
          "description" : "Name of a function to be called with an array of notification objects. If this parameter is not supplied, the chunked stream is joined instead.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "Limit notifications to a specific event id. Use alphanumeric ids for repeating events. USED IN ALL THREE WAYS TO MAKE THIS REQUEST.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return comments in groups with these ID numbers, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "since_mtime",
          "in" : "query",
          "description" : "Should be supplied for all but the first polling request, so that any missed notifications are can be sent in an immediate response. IF YOU USE THE 'callback' QUERY PARAMETER, then... Return recent messages with an mtime greater then the supplied time, in millisends since the epoch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "since_count",
          "in" : "query",
          "description" : "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|name|the name of the member|\r\n|time|the date and time of the checkin|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|checker|Member who performed the checkin, if not the same as the one who checked in|\r\n|checkin_id|ID of the checkin|\r\n|event_id|event checked into|\r\n|lat|Latitude, if provided|\r\n|lon|Longitude, if provided|\r\n|member|Member who is checked in|\r\n|time|checkin time in milliseconds since the epoch|\r\n\r\n#3\r\nErrors:\r\n|||\r\n|-|\r\n|connection_limit|the client IP has exceeded its maximum number of connections|\r\n  \r\n#2\r\nErrors:\r\n|||\r\n|-|\r\n|connection_limit|the client IP has exceeded its maximum number of connections|\r\n  \r\n#3\r\n|||\r\n|-|\r\n|checker|Member who performed the checkin, if not the same as the one who checked in|\r\n|checkin_id|Unique identifier for this checkin|\r\n|comment|Text of the checkin comment if one was supplied|\r\n|event_id|String ID of the event checked into|\r\n|group_id|Group ID of the event|\r\n|lat|Latitude reported, if any. Hidden from non-members of the group if the venue is hidden from non-members.|\r\n|lon|Longitude reported, if any. Hidden from non-members of the group if the venue is hidden from non-members.|\r\n|member_id|Member who checked in|\r\n|member_name|Name of the member who checked in|\r\n|time|The time and date of the checkin, in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/deprecatedCheckins"
            }
          }
        }
      }
    },
    "/2/cities" : {
      "get" : {
        "summary" : "Returns Meetup cities. Can search by location, by query term/zip, or by both. Location-only searches return all cities within a radius of the provided coordinates. Searches with a query return up to 10 cities matching the term, and can be sorted by size or distance to a given coordinate. 'smart' ordering can be used to return the match(es) with the highest member_count, unless a smaller size match exists nearby the given coordinates.\r\n\r\n#Request Parameters\r\nThis method requires no authentication but is subject to request limiting based on client IP . This search is location based. A lat and lon must be supplied together or a query or the search will be based on your geolocated ip\r\n",
        "description" : "Returns Meetup cities. Can search by location, by query term...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|distance|When lat/lon/query provided, sort matches by distance to coordinates|\r\n|size|(default order) number of members in the city: descending|\r\n|smart|Sort by size, but if a match is close to given lat/lon, float to top. Only works when query provided|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "When searching by lat/lon only, specify a radius to search (default 50 miles)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Search term and/or zip to look for (if this is specified, max result size limited to 10)",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|city|The name of the city|\r\n|country|The ISO_3166-1 country code for the country which contains the city|\r\n|distance|The distance away from the provided coordinates, if applicable|\r\n|id|Numeric identifier of the city|\r\n|lat|The latitude of the city|\r\n|lon|The longitude of the city|\r\n|member_count|The number of Meetup members in the city|\r\n|name_string|The full name of the city, as returned by query search, if applicable|\r\n|ranking|Indicates the best-match ranking of this result|\r\n|state|The state which contains the city, if applicable|\r\n|zip|The zip code of the city. For cities in countries without zipcodes, a placeholder will be returned|\r\n",
            "schema" : {
              "$ref" : "#/definitions/cities"
            }
          }
        }
      }
    },
    "/2/concierge" : {
      "get" : {
        "summary" : "Recommends upcoming meetups for the authorized member.\r\n\r\n#Request Parameters\r\nFor geo-based requests, you may provide a location in one of three ways. By lat and lon, by zip, or by country, city, and optionally a state, if the provided country has states.\r\n\r\nIf the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned. If no parameters are specified, Meetups are recommended for the upcoming week in the member's default location.\r\n\r\nPagination works a little differently in this method than in others. Rather than using \"offset\" and \"page\" request parameters, this method uses an opaque \"page_token\" request parameter to determine the page of results returned. If there are more results, the \"next\" property of the meta section of the response will contain the next page's page_token. The number of results returned is not deterministic but a best-effort attempt will be made to return at least some.\r\n",
        "description" : "Recommends upcoming meetups for the authorized member.\r\n\r\n#Req...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "topic_id",
          "in" : "query",
          "description" : "Comma delimited list of topics to help inform recommendation",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "An opaque string used to page through results. This can be found appended to the 'next' link in the meta section of the response.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "text_format",
          "in" : "query",
          "description" : "Format of the description text, \"html\", \"plain\", or \"simplehtml\". Defaults to \"html\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "time",
          "in" : "query",
          "description" : "Return events scheduled within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above). Note: to retrieve past events you must also update status value\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category_id",
          "in" : "query",
          "description" : "Comma delimited list of category ids to limit recommendations to",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Radius, in miles for geographic requests, defaults to the member's preferred radius or 0.5 -- maximum 100. May also be specified as \"smart\", a dynamic radius based on the number of active groups in the area\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "self_groups",
          "in" : "query",
          "description" : "set to \"include\" or \"exclude\" meetups the authorized member belongs to; default is \"include\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "If searching in a country with states, a valid 2 character state code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "A valid US zip code, limits the returned groups to those within radius miles",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|time|ascending time is the default and only ordering|\r\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|announced|Organizers and hosts can see if the event was announced|\r\n|comment_count|Optional field, number of comments posted to the event|\r\n|created|UTC creation time of the event, in milliseconds since the epoch|\r\n|description|Description of the event|\r\n|distance|Distance in miles from the search location, if one was specified|\r\n|duration|Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.|\r\n|email_reminders|Optional fields parameter limited to organizers and event hosts, if false, event reminders are disabled|\r\n|event_hosts|List of members hosting the event, only returned if requested in the fields parameter.|\r\n|event_url|URL of the event's page on meetup.com|\r\n|featured|Optional fields parameter which returns \"true\" if the event is featured and \"false\" otherwise|\r\n|fee|Fee info returned when payment is defined|\r\n|group|Group that is hosting the event|\r\n|headcount|The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken|\r\n|how_to_find_us|The information provided by the event host for \"How will members find you there?\"|\r\n|id|The event id. May be numeric or alphanumeric, always served as a string|\r\n|is_simplehtml|Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.|\r\n|maybe_rsvp_count|Number of maybe RSVPs including guests|\r\n|name|The name of the event|\r\n|photo_album_id|optional fields parameter which returns the ID of the photo album for this event, if one exists|\r\n|photo_count|Optional field, number of photos posted to the event|\r\n|photo_url|URL of the event photo, if one exists|\r\n|publish_status|\"published\" or \"draft\" only visible to organizers|\r\n|rating|Only past events have this field, an aggregate of anonymous ratings|\r\n|rsvp_alerts|Optional fields parameter limited to organizers and event hosts, if false, member RSVP alerts are disabled|\r\n|rsvp_limit|The number of \"yes\" RSVPs an event can have before members will be added to the waiting list|\r\n|rsvp_rules|Conditions set by the organizer, only returned if requested in the fields parameter.|\r\n|rsvpable|Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter|\r\n|self|Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group|\r\n|short_link|Optional field. If hosting group is private, this will return the group's short_link|\r\n|simple_html_description|Optional field, description of the event in simple HTML format.|\r\n|status|\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\"|\r\n|survey_questions|Optional \"fields\" response property for event with surveys|\r\n|time|UTC start time of the event, in milliseconds since the epoch|\r\n|timezone|Returned when \"timezone\" is provided in fields parameter. This represents the universal timezone identifier for the host group|\r\n|trending_rank|Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter|\r\n|updated|UTC last modified time of the event, in milliseconds since the epoch|\r\n|utc_offset|The local offset from UTC time, in milliseconds|\r\n|venue|Venue, if selected and not hidden|\r\n|venue_visibility|Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter|\r\n|visibility|Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.|\r\n|why|We should do this because...|\r\n|yes_rsvp_count|Number of yes RSVPs including guests|\r\n",
            "schema" : {
              "$ref" : "#/definitions/concierge"
            }
          }
        }
      }
    },
    "/2/event_comment" : {
      "post" : {
        "summary" : "This method posts messages that appear under \"Talk about this Meetup\".\r\n\r\n#Request Parameters\r\nAll of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be a member of the group hosting the event\r\n",
        "description" : "This method posts messages that appear under \"Talk about thi...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "comment",
          "in" : "query",
          "description" : "The comment text",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "The event related to this comment.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "in_reply_to",
          "in" : "query",
          "description" : "If this comment is a reply, the ID of the comment being replied to",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "notifications",
          "in" : "query",
          "description" : "Notification control for authorized member on this comment thread. \"on\" will result in notifications being sent. \"off\" will opt the member out of notifications for this comment thread. Defaults to \"on\" unless the member previous opted out of notifications on the thread.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method responds with a \"201 Created\" status and a JSON or XML body consisting of the posted comment in the same fields as the response items of the Event Comment Get (\"/2/event_comment/:id\") method.",
            "schema" : {
              "$ref" : "#/definitions/eventComment"
            }
          }
        }
      }
    },
    "/2/event_comment_flag" : {
      "post" : {
        "summary" : "This method creates a spam report for comment content\r\n\r\n#Request Parameters\r\nAll required parameters must be supplied.\r\n",
        "description" : "This method creates a spam report for comment content\r\n\r\n#Requ...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "reason",
          "in" : "query",
          "description" : "Reason for flagging the comment. May be one of inappropriate, spam",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comment_id",
          "in" : "query",
          "description" : "The id of the comment",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      }
    },
    "/2/event_comment_like/{id}" : {
      "post" : {
        "summary" : "Like a given Event comment\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed. :id in the path should be the id of the comment you are liking\r\n",
        "description" : "Like a given Event comment\r\n\r\n#Request Parameters\r\nOnly authori...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : { }
      },
      "delete" : {
        "summary" : "Unlike a given Event comment\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed. :id in the path should be the id of the comment you are unliking\r\n",
        "description" : "Unlike a given Event comment\r\n\r\n#Request Parameters\r\nOnly autho...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id in the path should be the id of a comment",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/2/event_comment_likes" : {
      "get" : {
        "summary" : "Api for listing likes of a given event comment\r\n\r\n#Request Parameters\r\nAt least one of the required parameters must be supplied with the request.\r\n",
        "description" : "Api for listing likes of a given event comment\r\n\r\n#Request Par...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|created|Order by the time the member liked like comment (default: descending)|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comment_id",
          "in" : "query",
          "description" : "Return likes for a given comment_id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|created|UTC creation time of the event, in milliseconds since the epoch|\r\n|event_comment_id|ID of the comment liked|\r\n|member|member who liked the comment|\r\n",
            "schema" : {
              "$ref" : "#/definitions/eventCommentLikes"
            }
          }
        }
      }
    },
    "/2/event_comment_subscribe/{id}" : {
      "post" : {
        "summary" : "Subscribe to notifications on updates to a given comment thread\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed. :id in the path should be id of comment being replied to which you are subscribing to notifications for\r\n",
        "description" : "Subscribe to notifications on updates to a given comment thr...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : { }
      },
      "delete" : {
        "summary" : "Unsubscribe to notifications for updates to a given comment thread\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed. :id in the path should be the id of comment being replied to which you are unsubscribing to notifications from\r\n",
        "description" : "Unsubscribe to notifications for updates to a given comment ...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id in the path should be the id of a comment",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/2/event_comments" : {
      "get" : {
        "summary" : "This method returns messages that appear under \"Talk about this Meetup\". To post messages, see the corresponding write method.\r\n\r\n#Request Parameters\r\nAt least one of the required parameters must be supplied with the request.\r\n",
        "description" : "This method returns messages that appear under \"Talk about t...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return comments in groups with these ID numbers, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|name|Order by the name of the member|\r\n|thread|Order by comment threads, those with the most recent activity are listed first. Only one event may be provided and desc not supported. Also note that with this ordering, *replies* are excluded from pagination accounting. Only top-level comments will be capped at the page size.|\r\n|time|Order by the time that each rating was posted (default: descending)|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "Return comments on these events, separated by commas.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Optionally accepts the value \"member_photo\" or \"notifications\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comment_id",
          "in" : "query",
          "description" : "Return comments for a given set of comment IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "show_diffs",
          "in" : "query",
          "description" : "Return auto-generated event change comments. Default value is true, turn off by specifying \"show_diffs=false\".",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|comment|The comment the member left for the event|\r\n|comment_url|URL for the event comment on meetup.com|\r\n|event|Optional field, basic info on event associated with comment|\r\n|event_comment_id|The ID of this comment|\r\n|event_diff_id|The ID of this comment if it is an auto-generated event change comment|\r\n|event_id|The string ID of the event the comment belongs to|\r\n|group_id|The ID of the group that the event belongs to|\r\n|in_reply_to|If this is a reply, the ID of the comment replied to|\r\n|like_count|optional fields parameter which adds the number of likes this comment has received|\r\n|member_id|The ID of the member that posted the comment. May be 0 for former members|\r\n|member_name|The name of the member that posted the comment. May be \"Former Member\" for former members|\r\n|member_photo|If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment|\r\n|notifications|optional fields parameter to append the authorized member's current notification preference for the given comment|\r\n|self|Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group|\r\n",
            "schema" : {
              "$ref" : "#/definitions/eventComments"
            }
          }
        }
      }
    },
    "/2/event_rating" : {
      "post" : {
        "summary" : "This method allows members to posts rating for an event after it's occurred. Only permitted for members who rsvp'd \"yes\" or \"maybe\" to the event\r\n",
        "description" : "This method allows members to posts rating for an event afte...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "rating",
          "in" : "query",
          "description" : "The member's rating (either 1, 2, 3, 4, or 5)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "The ID of the event to fetch ratings data for",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "attendee_count",
          "in" : "query",
          "description" : "The number of attendees for the event (organizers/assistant organizers/co-organizers/event organizers/event hosts only)",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|event_id|The string ID of the event|\r\n|group_id|The ID of the group|\r\n|rating|The overall average rating of the event|\r\n|rating_count|The number of reviews posted for the event|\r\n|time|The time that the event was created|\r\n",
            "schema" : {
              "$ref" : "#/definitions/eventRating"
            }
          }
        }
      }
    },
    "/2/event_ratings" : {
      "get" : {
        "summary" : "API method for accessing Meetup comments\r\n\r\n#Request Parameters\r\nAt least one of the required parameters must be supplied with the request.\r\n",
        "description" : "API method for accessing Meetup comments\r\n\r\n#Request Parameter...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "event_id",
          "in" : "query",
          "description" : "The ID of the event to fetch ratings data for",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|rating|Order by the value for each rating posted|\r\n|time|Order by the time that each rating was posted|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "The ID of a member to filter ratings on",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|event_id|The string ID of the event|\r\n|group_id|The ID of the group that the event belongs to|\r\n|member_id|id of the member leaving the review|\r\n|member_name|name of member leaving th review|\r\n|rating|Only present if the authenticated member is the reviewer; number of stars given|\r\n|time|The date/time that the review was created|\r\n",
            "schema" : {
              "$ref" : "#/definitions/eventRatings"
            }
          }
        }
      }
    },
    "/2/group_photo" : {
      "post" : {
        "summary" : "Uploads a new Meetup Group photo. To change other Group settings use the Group Edit endpoint\r\n\r\n#Request Parameters\r\nThe request must be a POST of content-type multipart/form-data. The supplied photo will be added to the provided groups general photo album. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string. You must be an organizer of the group in order to load a photo.\r\n",
        "description" : "Uploads a new Meetup Group photo. To change other Group sett...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "main",
          "in" : "query",
          "description" : "Set to 'true' to have this photo become the group's main photo. Set it to 'false' otherwise. Defaults to true",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo",
          "in" : "query",
          "description" : "The photo, encoded as multipart/form-data. The maximum file size allowed is 10MB",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Group ID for the target group. This may be used as an alternative to group_urlname",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Group urlname. This may be used as an alternative to group_id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "await",
          "in" : "query",
          "description" : "If true, this ensures a response will not be returned until the upload is accessible",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "When successful, this method responds with a status of \"201 Created\" and a Location header with the uploaded photo's URL. The response body contains the following elements in JSON or XML. Upon recieving the response, some photos may not be immediately accesible. If this is desirable, use the \"await\" request parameter\r\n|||\r\n|-|\r\n|group_photo_id|Unique identifier of this photo|\r\n|photo_url|Link to the uploaded group photo (same as in the Location header).|\r\n|title|Request Completed|\r\n",
            "schema" : {
              "$ref" : "#/definitions/groupPhotoUploadResult"
            }
          }
        }
      }
    },
    "/2/member/{id}" : {
      "get" : {
        "summary" : "Retrieve a single member\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed.\r\n",
        "description" : "Retrieve a single member\r\n\r\n#Request Parameters\r\nOnly authoriza...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "comma-separate list of optional fields",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|bio|A description of the member|\r\n|birthday|If the authorized is the current member, the member's birthday based on provided information|\r\n|country, city, state|Country, City, (and for the US, State) the member has provided|\r\n|email|Member's email address, if requested in fields parameter. This item is only included if the currently authenticated user is the founder of a Meetup Everywhere in which the member has elected to share an email address.|\r\n|gender|Optional fields parameter. Members can only see their own gender. May be one of none, other, female, male|\r\n|hometown|Hometown of member|\r\n|id|The member's id|\r\n|joined|Date and time a member joined in milliseconds since the epoch|\r\n|lang|The member's current language preference|\r\n|lat, lon|Latitude and longitude coordinates of the members reported city|\r\n|link|URL to the member's profile page on meetup.com|\r\n|membership_count|Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.|\r\n|messagable|Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.|\r\n|messaging_pref|Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"|\r\n|name|The member's name|\r\n|other_services|Third-party services associated with the member account|\r\n|photo|The member's photo if available|\r\n|photo_url|Link to the profile photo of the member|\r\n|photos|List of all the member's photos returned as an array of the representation of the photo property|\r\n|privacy|Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member|\r\n|reachable|Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise|\r\n|self|Optional field, details particular to the authorized user.|\r\n|topics|A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same|\r\n|visited|Date and time of member's last activity in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/member"
            }
          }
        }
      },
      "post" : {
        "summary" : "Edit the authorized member's attributes\r\n\r\n#Request Parameters\r\nThis method requires tls. Only the authorized user may edit their own propertries. A city may be provided by either a city_id or a combination of lat and lon\r\n",
        "description" : "Edit the authorized member's attributes\r\n\r\n#Request Parameters...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "facebook_privacy",
          "in" : "query",
          "description" : "Controls the visibility of the member's facebook connection. May be one of hidden, visible. If the member has not connected their Facebook account, attempts to set this preference will do nothing.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Language preference used on the site. Valid values are en_us, de, es, fr, it, pt",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city_id",
          "in" : "query",
          "description" : "Valid city id from /2/cities method",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "topics_privacy",
          "in" : "query",
          "description" : "Controls the visibility of the member's topics. May be one of hidden, visible",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sync_photo",
          "in" : "query",
          "description" : "When set to true, this parameter will sync all of the group profile photos for the member with the provided photo_id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "hometown",
          "in" : "query",
          "description" : "Hometown of member. Can not be longer than 64 characters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photos_privacy",
          "in" : "query",
          "description" : "Controls the visibility of the member's photos. May be one of hidden, visible",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "remove_topics",
          "in" : "query",
          "description" : "Comma-delimited list of topic ids to remove from your alert list",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "radius, in miles to search for city given a lat and lon. default 25.0, max 100.0",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "Valid zip code for city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "add_topics",
          "in" : "query",
          "description" : "Comma-delimited list of topics ids to add to your alert list",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name of the current member",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groups_privacy",
          "in" : "query",
          "description" : "Controls the visibility of the member's groups. May be one of hidden, visible",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gender",
          "in" : "query",
          "description" : "Your gender (used for better recommendations). Valid values are be one of none, other, female, male",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_id",
          "in" : "query",
          "description" : "A valid photo_id from the member's photos to set as the main profile photo",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bio",
          "in" : "query",
          "description" : "Free form text passage about you. must be less than 250 characters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "birthday",
          "in" : "query",
          "description" : "Day you were born. Format should be in the form of yyyy or mmddyyyy. A value of -1 indicates that birthday data should be cleared.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bio_privacy",
          "in" : "query",
          "description" : "Controls the visibility of the member's bio. May be one of hidden, visible",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|bio|A description of the member|\r\n|birthday|If the authorized is the current member, the member's birthday based on provided information|\r\n|country, city, state|Country, City, (and for the US, State) the member has provided|\r\n|email|Member's email address, if requested in fields parameter. This item is only included if the currently authenticated user is the founder of a Meetup Everywhere in which the member has elected to share an email address.|\r\n|gender|Optional fields parameter. Members can only see their own gender. May be one of none, other, female, male|\r\n|hometown|Hometown of member|\r\n|id|The member's id|\r\n|joined|Date and time a member joined in milliseconds since the epoch|\r\n|lang|The member's current language preference|\r\n|lat, lon|Latitude and longitude coordinates of the members reported city|\r\n|link|URL to the member's profile page on meetup.com|\r\n|membership_count|Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.|\r\n|messagable|Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.|\r\n|messaging_pref|Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"|\r\n|name|The member's name|\r\n|other_services|Third-party services associated with the member account|\r\n|photo|The member's photo if available|\r\n|photo_url|Link to the profile photo of the member|\r\n|photos|List of all the member's photos returned as an array of the representation of the photo property|\r\n|privacy|Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member|\r\n|reachable|Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise|\r\n|self|Optional field, details particular to the authorized user.|\r\n|topics|A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same|\r\n|visited|Date and time of member's last activity in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/member"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id in the path should be the id of a member",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/2/member_photo" : {
      "post" : {
        "summary" : "Uploads a photo to be assocated with a Member\r\n\r\n#Request Parameters\r\nThe request must be a POST of content-type multipart/form-data. The supplied photo will be added to the currently authenticated user's member profile. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string.\r\n",
        "description" : "Uploads a photo to be assocated with a Member\r\n\r\n#Request Para...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "main",
          "in" : "query",
          "description" : "Set to \"true\" to have this photo become the member's main profile photo. Otherwise, it will become the main photo only when none other is selected\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo",
          "in" : "query",
          "description" : "The photo, encoded as multipart/form-data. The maximum file size allowed is 10MB",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sync_photo",
          "in" : "query",
          "description" : "When set to true, this parameter will sync all of the group profile photos for the member with the provided photo_id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "await",
          "in" : "query",
          "description" : "If true, this ensures a response will not be returned until the upload is accessible",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "When successful, this method responds with a status of \"201 Created\" and a Location header with the uploaded photo's URL. The response body contains the following elements in JSON or XML. Upon recieving the response, some photos may not be immediately accesible. If this is desirable, use the \"await\" request parameter\r\n|||\r\n|-|\r\n|member_photo_id|Unique identifier of this photo|\r\n|photo_url|Link to the uploaded member photo (same as in the Location header).|\r\n|title|Request Completed|\r\n",
            "schema" : {
              "$ref" : "#/definitions/memberPhotoUploadResult"
            }
          }
        }
      }
    },
    "/2/member_photo/{id}" : {
      "delete" : {
        "summary" : "Delete the specified member photo\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed. Authorized user must be the member owning the photo\r\n",
        "description" : "Delete the specified member photo\r\n\r\n#Request Parameters\r\nOnly ...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id is a photo identifier",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/2/members" : {
      "get" : {
        "summary" : "API method for accessing members of Meetup Groups\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group.\r\n",
        "description" : "API method for accessing members of Meetup Groups\r\n\r\n#Request ...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupnum",
          "in" : "query",
          "description" : "{topic,groupnum} - Return members for the group with given topic and number\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Return members for the group with the given custom URL path",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Match users by the external services they've linked to their member account, specified as \"servicename:identifier\". For example, \"service=twitter:@MeetupAPI\" finds any member account that lists @MeetupAPI as its Twitter name (none, currently). You can query against several at a time by separating them with commas.\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "topic",
          "in" : "query",
          "description" : "{topic,groupnum} - Return members for the group with given topic and number\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return comments in groups with these ID numbers, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|joined|time member joined Meetup|\r\n|name|the name of the member (default order)|\r\n|visited|member's most recent activity|\r\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|bio|A description of the member|\r\n|birthday|If the authorized is the current member, the member's birthday based on provided information|\r\n|country, city, state|Country, City, (and for the US, State) the member has provided|\r\n|email|Member's email address, if requested in fields parameter. This item is only included if the currently authenticated user is the founder of a Meetup Everywhere in which the member has elected to share an email address.|\r\n|gender|Optional fields parameter. Members can only see their own gender. May be one of none, other, female, male|\r\n|hometown|Hometown of member|\r\n|id|The member's id|\r\n|joined|Date and time a member joined in milliseconds since the epoch|\r\n|lang|The member's current language preference|\r\n|lat, lon|Latitude and longitude coordinates of the members reported city|\r\n|link|URL to the member's profile page on meetup.com|\r\n|membership_count|Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.|\r\n|messagable|Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.|\r\n|messaging_pref|Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"|\r\n|name|The member's name|\r\n|other_services|Third-party services associated with the member account|\r\n|photo|The member's photo if available|\r\n|photo_url|Link to the profile photo of the member|\r\n|photos|List of all the member's photos returned as an array of the representation of the photo property|\r\n|privacy|Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member|\r\n|reachable|Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise|\r\n|self|Optional field, details particular to the authorized user.|\r\n|topics|A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same|\r\n|visited|Date and time of member's last activity in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/members"
            }
          }
        }
      }
    },
    "/2/message" : {
      "post" : {
        "summary" : "This method allows messaging-authorized requests to send messages between members\r\n\r\n#Request Parameters\r\nThis method requires an HTTP POST and OAuth authorization in combination with the messaging permission scope. All required parameters must be supplied. You can call this method with dryrun set to true if you wish to test the validation logic before sending the actual request\r\n",
        "description" : "This method allows messaging-authorized requests to send mes...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "subject",
          "in" : "query",
          "description" : "Text of message subject",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return comments in groups with these ID numbers, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "cc_sender",
          "in" : "query",
          "description" : "Sends a copy of the message to the sender, defaults to true.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "dryrun",
          "in" : "query",
          "description" : "Performs request without sending message. Useful for pre-testing error conditions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "message",
          "in" : "query",
          "description" : "Text of message to body",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "hide_email",
          "in" : "query",
          "description" : "Hides sender's email from receiving member, defaults to false",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      }
    },
    "/2/open_events" : {
      "get" : {
        "summary" : "Searches for recent and upcoming public events hosted by Meetup groups. Its search window is the past one month through the next three months, and is subject to change. Open Events is optimized to search for current events by location, category, topic, or text, and only lists Meetups that have 3 or more RSVPs. The number or results returned with each request is not guaranteed to be the same as the page size due to secondary filtering.\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request.\r\n\r\nFor geo-based requests, you may provide a location in one of three ways. By lat and lon, by zip, or by country, city, and optionally a state, if the provided country has states.\r\n\r\nSome groups, while remaining private, still wish to show some information about their events. You can include these events in results using the limited_events request parameter.\r\n",
        "description" : "Searches for recent and upcoming public events hosted by Mee...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "time",
          "in" : "query",
          "description" : "Return events scheduled within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above). Note: to retrieve past events you must also update status value\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Radius, in miles for geographic requests, default 25.0 -- maximum 100. May also be specified as \"smart\", a dynamic radius based on the number of active groups in the area",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|distance|ordering is approximate and will not exactly match the values in the \"distance\" field.|\r\n|time|(default order) ascending|\r\n|trending|you will likely want to specify \"desc=true\" to get the best trending results first.|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "text",
          "in" : "query",
          "description" : "Events that contain the given term or terms somewhere in their content. The terms are OR'd by default. Separate terms with \" AND \" for events that have combined terms. To have terms automatically AND'd, set the \"and_text\" to true\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "topic",
          "in" : "query",
          "description" : "Return events in the specified topic or topics specified by commas. This is the topic \"urlkey\" returned by the Topics method. If all supplied topics are unknown, a 400 error response is returned with the code \"badtopic\".",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limited_events",
          "in" : "query",
          "description" : "Include limited event information for private groups that wish to expose only a small amount of information about their events. This includes just: id, name, utc_offset, time, duration, yes_rsvp_count, waitlist_count, group, visibility. Value must be true or false.\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "A valid US zip code, limits the returned groups to those within radius miles",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "and_text",
          "in" : "query",
          "description" : "Changes the interpretation of the \"text\" field from OR'd terms to AND'd terms\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "If searching in a country with states, a valid 2 character state code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Return events in the specified category or categories specified by commas. This is the category id returned by the Categories method.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status may be \"upcoming\", \"past\" or both separated by a comma. The default is \"upcoming\" only",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "text_format",
          "in" : "query",
          "description" : "Format of the description text, \"html\" or \"plain\". Defaults to \"html\"",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|announced|Organizers and hosts can see if the event was announced|\r\n|comment_count|Optional field, number of comments posted to the event|\r\n|created|UTC creation time of the event, in milliseconds since the epoch|\r\n|description|Description of the event|\r\n|distance|Distance in miles from the search location, if one was specified|\r\n|duration|Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.|\r\n|email_reminders|Optional fields parameter limited to organizers and event hosts, if false, event reminders are disabled|\r\n|event_hosts|List of members hosting the event, only returned if requested in the fields parameter.|\r\n|event_url|URL of the event's page on meetup.com|\r\n|featured|Optional fields parameter which returns \"true\" if the event is featured and \"false\" otherwise|\r\n|fee|Fee info returned when payment is defined|\r\n|group|Group that is hosting the event|\r\n|headcount|The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken|\r\n|how_to_find_us|The information provided by the event host for \"How will members find you there?\"|\r\n|id|The event id. May be numeric or alphanumeric, always served as a string|\r\n|is_simplehtml|Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.|\r\n|maybe_rsvp_count|Number of maybe RSVPs including guests|\r\n|name|The name of the event|\r\n|photo_album_id|optional fields parameter which returns the ID of the photo album for this event, if one exists|\r\n|photo_count|Optional field, number of photos posted to the event|\r\n|photo_url|URL of the event photo, if one exists|\r\n|publish_status|\"published\" or \"draft\" only visible to organizers|\r\n|rating|Only past events have this field, an aggregate of anonymous ratings|\r\n|rsvp_alerts|Optional fields parameter limited to organizers and event hosts, if false, member RSVP alerts are disabled|\r\n|rsvp_limit|The number of \"yes\" RSVPs an event can have before members will be added to the waiting list|\r\n|rsvp_rules|Conditions set by the organizer, only returned if requested in the fields parameter.|\r\n|rsvpable|Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter|\r\n|self|Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group|\r\n|short_link|Optional field. If hosting group is private, this will return the group's short_link|\r\n|simple_html_description|Optional field, description of the event in simple HTML format.|\r\n|status|\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\"|\r\n|survey_questions|Optional \"fields\" response property for event with surveys|\r\n|time|UTC start time of the event, in milliseconds since the epoch|\r\n|timezone|Returned when \"timezone\" is provided in fields parameter. This represents the universal timezone identifier for the host group|\r\n|trending_rank|Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter|\r\n|updated|UTC last modified time of the event, in milliseconds since the epoch|\r\n|utc_offset|The local offset from UTC time, in milliseconds|\r\n|venue|Venue, if selected and not hidden|\r\n|venue_visibility|Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter|\r\n|visibility|Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.|\r\n|why|We should do this because...|\r\n|yes_rsvp_count|Number of yes RSVPs including guests|\r\n",
            "schema" : {
              "$ref" : "#/definitions/events"
            }
          }
        }
      }
    },
    "/2/open_venues" : {
      "get" : {
        "summary" : "Searches for public venues within a given geo space. To search for specific venues that your group has used, use the Venues method\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request. If you are not able to provide a relative location you may supply a group_urlname which this method will use to infer location from. You can perform prefix searching by appending a * character to your query\r\n",
        "description" : "Searches for public venues within a given geo space. To sear...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "A valid US zip code, limits the returned venues to those within radius miles",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Returns venues with location relative to the group associated with this urlname",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "text",
          "in" : "query",
          "description" : "Venues that contain the given term or terms somewhere in their content. Separate terms with \" AND \" for venues that have combined terms. Append a trailing * to treat this as a prefix search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Radius, in miles for geographic requests, default 25.0 -- maximum 100.0",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "For the US, a valid 2 character state code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|distance|(default order) ordering is approximate and will not exactly match the values in the \"distance\" field.|\r\n|rating|average member rating|\r\n|rating_count|number of member ratings.|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|address_1|line 1 of venue address|\r\n|address_2|line 2 of venue address|\r\n|address_3|line 3 of venue address|\r\n|city, state, country|City, County and if in US state of venue|\r\n|distance|Distance in miles from the search location, if one was specified|\r\n|email|email address of venue|\r\n|fax|fax number of venue|\r\n|id|ID of the venue|\r\n|lat, lon|coordinates of venue|\r\n|name|Name of the venue|\r\n|phone|phone number of venue|\r\n|rating|The average member rating|\r\n|rating_count|The number of member ratings|\r\n|taglist|Optional array of associated tagnames provided when a value of \"taglist\" is supplied with the \"fields\" request parameter|\r\n|venue_url|URL of the venues's page on meetup.com|\r\n|zip|if US or Canada|\r\n",
            "schema" : {
              "$ref" : "#/definitions/venues"
            }
          }
        }
      }
    },
    "/2/photo" : {
      "post" : {
        "summary" : "Uploads a photo for a given event\r\n\r\n#Request Parameters\r\nA photo album or event ID must be supplied with the request, which must be a POST of content-type multipart/form-data. The currently authenticated user must be a member of the group that is hosting the event. Parameters other than photo may be passed in as a query string or within the posted content. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string\r\n",
        "description" : "Uploads a photo for a given event\r\n\r\n#Request Parameters\r\nA pho...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "photo",
          "in" : "query",
          "description" : "The photo, encoded as multipart/form-data. The maximum file size allowed is 10MB",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "Identifier of an event. If there is no album for this event, one will be created.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caption",
          "in" : "query",
          "description" : "Caption for the photo",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_album_id",
          "in" : "query",
          "description" : "Identifier of an existing photo album, which may be an event or group album",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "await",
          "in" : "query",
          "description" : "If true, this ensures a response will not be returned until the upload is accessible",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "When successful, this method responds with a status of \"201 Created\" and a Location header with the uploaded photo's URL. The response body contains the following elements in JSON or XML. Upon recieving the response, some photos may not be immediately accesible. If this is desirable, use the \"await\" request parameter\r\n|||\r\n|-|\r\n|album_id|Identifier of the photo's album|\r\n|created|Created time in milliseconds since the epoch|\r\n|event_photo_id|Unique identifier of this photo|\r\n|member|Member that uploaded the photo|\r\n|photo_url|Link to the uploaded event photo (same as in the Location header).|\r\n|site_link|URL for photo in photo album on meetup.com|\r\n|title|Request Completed|\r\n|updated|Last updated time in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/photo"
            }
          }
        }
      }
    },
    "/2/photo/{id}" : {
      "delete" : {
        "summary" : "Delete specified event photo\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed. Authorized user must be the original poster of the photo or the organizer of the group the photo was posted in\r\n",
        "description" : "Delete specified event photo\r\n\r\n#Request Parameters\r\nOnly autho...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id is the photo identifier",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/2/photo_album" : {
      "post" : {
        "summary" : "This method creates photo albums within a Meetup group\r\n\r\n#Request Parameters\r\nAll of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be an organizer (main, assistant, or co-) of the specified group\r\n",
        "description" : "This method creates photo albums within a Meetup group\r\n\r\n#Req...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "title",
          "in" : "query",
          "description" : "Title of the new album",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Group to create the album in",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method responds with a \"201 Created\" status and a json or XML body consisting of the album data in the same fields as the response items of the Photo Albums method.",
            "schema" : {
              "$ref" : "#/definitions/photoAlbum"
            }
          }
        }
      }
    },
    "/2/photo_albums" : {
      "get" : {
        "summary" : "This method returns photo albums associated with Meetup groups. To create albums, see the corresponding write method.\r\n \r\n #Request Parameters\r\n At least one of the required parameter(s) must be supplied with the request.\r\n",
        "description" : "This method returns photo albums associated with Meetup grou...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|time|creation date and time|\r\n|title|title of the album|\r\n|updated|album updated field|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "Return photo albums for these event ids, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return albums in groups with these ID, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_album_id",
          "in" : "query",
          "description" : "Return albums with these IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|album_photo|Selected photo from the album to display in listings|\r\n|created|Created time in milliseconds since the epoch|\r\n|event_id|Event ID if this is an event photo album|\r\n|group_id|ID of the group that created the album|\r\n|ordering|If a custom ordering is defined, a list of photo IDs|\r\n|photo_album_id|Unique identifier of the album|\r\n|photo_count|Number of photos in the album|\r\n|title|Photo album title|\r\n|updated|Last updated time in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/photoAlbums"
            }
          }
        }
      }
    },
    "/2/photo_comment" : {
      "post" : {
        "summary" : "This method posts comments that appear below photos\r\n\r\n#Request Parameters\r\nAll of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be a member of the group hosting the photo\r\n",
        "description" : "This method posts comments that appear below photos\r\n\r\n#Reques...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "photo_id",
          "in" : "query",
          "description" : "The photo related to this comment.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comment",
          "in" : "query",
          "description" : "The comment text",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "If successful, this method responds with a \"201 Created\" status and a JSON or XML body consisting of the posted comment in the same fields as the response items of the Photo Comments method.",
            "schema" : {
              "$ref" : "#/definitions/photoComment"
            }
          }
        }
      }
    },
    "/2/photo_comments" : {
      "get" : {
        "summary" : "This method returns comments on meetup photos. To post messages, see the corresponding write method\r\n\r\n#Request Parameters\r\nAt least one of the required parameters must be supplied by the request.\r\n",
        "description" : "This method returns comments on meetup photos. To post messa...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_id",
          "in" : "query",
          "description" : "Return comments on these photos, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|name|the name of the member|\r\n|time|Order by the time that each comment was posted|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas. The member ids must match up with one of the provided photo ids",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|comment|Text of the comment that was posted|\r\n|created|The time and date that the comment was posted, in milliseconds since the epoch|\r\n|member|Author of comment|\r\n|member_photo|If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment|\r\n|photo_comment_id|Unique identifier for this comment|\r\n|photo_id|Photo ID where the comment was posted|\r\n",
            "schema" : {
              "$ref" : "#/definitions/photoComments"
            }
          }
        }
      }
    },
    "/2/photos" : {
      "get" : {
        "summary" : "This method returns photos by member, group, album, event, photo ID, or tagged member.\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request.\r\n",
        "description" : "This method returns photos by member, group, album, event, p...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "comma-delimited optional response properties such as member_country, member_city, member_state, and self",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "time",
          "in" : "query",
          "description" : "Return photos uploaded within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Group urlnames, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_id",
          "in" : "query",
          "description" : "Photo IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|time|creation date and time|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "Event ids, separated by commas. These may contain alphanumeric autoscheduled event ids, only photos of reified events will be returned",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_album_id",
          "in" : "query",
          "description" : "Photo Album IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return comments in groups with these ID numbers, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tagged",
          "in" : "query",
          "description" : "Tagged with members with these IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|caption|Photo caption|\r\n|created|Created time in milliseconds since the epoch|\r\n|highres_link|URL for the photo at its maximum size|\r\n|member|Member that uploaded the photo|\r\n|member_photo|Optional member photo of the uploading member|\r\n|photo_album|-|\r\n|photo_id|Unique identifier of the photo|\r\n|photo_link|URL for a standard size of the photo|\r\n|self|Optional field, contains details specific to the authorized user|\r\n|site_link|URL for photo in photo album on meetup.com, available when requested in the fields parameter|\r\n|thumb_link|URL for a thumbnail the photo|\r\n|updated|Last updated time in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/photos"
            }
          }
        }
      }
    },
    "/2/profile" : {
      "post" : {
        "summary" : "This method allows an authenticated member to join a group by creating a profile\r\n\r\n#Request Parameters\r\nThis method requires an HTTP POST. All required parameters must be supplied. An intro and answers may be required based on the group the member is joining. To find out if a group requires an intro or answers to questions, query for the group through one of the Groups methods providing setting the fields parameter to join_info and inspecting the join_info in the results. Answers to the questions must be named using the convention answer_{question_id}\r\n",
        "description" : "This method allows an authenticated member to join a group b...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "group_id",
          "in" : "query",
          "description" : "Id of group to join",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "new_photo",
          "in" : "query",
          "description" : "file upload for a new member photo",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Urlname of group to join",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "site_name",
          "in" : "query",
          "description" : "Name of member's site. Max length is 32",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "site_url",
          "in" : "query",
          "description" : "Link to member's site. Max length is 80",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_id",
          "in" : "query",
          "description" : "photo_id of the photo to use for this profile",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "intro",
          "in" : "query",
          "description" : "Provides a Member an opportunity to tell the group about themselves",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "answer_{qid}",
          "in" : "query",
          "description" : "Answers to questions from groups API join_info question fields",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      }
    },
    "/2/profile/{gid}/{mid}" : {
      "get" : {
        "summary" : "Retrieves a single group profile\r\n\r\n#Request Parameters\r\nOnly authorization parameters are needed.\r\n",
        "description" : "Retrieves a single group profile\r\n\r\n#Request Parameters\r\nOnly a...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|additional|Additional information supplied by the member|\r\n|answers|Answers to group profile questions. Unanswered questions will be returned without an answer property if \"empty_answers\" is provided as a \"fields\" property value|\r\n|attendance_count|Optional fields property representing number of times the member has attended a Meetup in the associated group.|\r\n|bio|Member's 'introduction' to the group|\r\n|comment|What this member says about this group|\r\n|created, updated|When this member profile was created and last updated, in milliseconds since the epoch.|\r\n|group|The group this profile belongs to|\r\n|member_city|Optional fields parameter for the Member's city|\r\n|member_country|Optional fields parameter for the Member's country code|\r\n|member_id|The member's id|\r\n|member_state|Optional fields parameter for the Member's state (when country is us)|\r\n|membership_dues|Optional fields parameter for the last payment received for the Group's membership dues and optionally, the status of the member's dues for the current billing period if the group has set up recurring membership dues payments. This field is only visible only to the organizer of the group and to the member themselves. Members can not see other member's membership dues|\r\n|name|The member's name|\r\n|other_services|Third-party services associated with the member account|\r\n|photo|The member's photo if available|\r\n|photo_url|Link to the group profile photo of the member|\r\n|profile_url|Link to the member's group profile page|\r\n|role|If applicable, the member's role in the group (Organizer, Assistant Organizer, Co-organizer, or Event Organizer)|\r\n|site_url, site_name|External site listed by the member|\r\n|status|Value may be one of pending_payment, blocked, active, pending|\r\n|title|Title assigned to the member in this group|\r\n|visited|Member's last visit to the group site, in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/profile"
            }
          }
        }
      },
      "post" : {
        "summary" : "Update a member's group profile\r\n\r\n#Request Parameters\r\nThe gid and mid in this method's path are group and member IDs, both needed to uniquely identify the member profile to be edited. An authenticated user may update their own profile by substituting \"self\" for the mid. All POST parameters are optional unless required by the group. Only the organizer of the group may edit the member's title and role within the group. Those are the only things the organizer may edit. When requesting to set a role with add_role the member's previous role will be cleared. Members may edit all other fields of their own profiles with the exception of title, add_role, and remove_role. This method requires an HTTP POST.\r\n",
        "description" : "Update a member's group profile\r\n\r\n#Request Parameters\r\nThe gid...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "photo_id",
          "in" : "query",
          "description" : "photo_id of the photo to use for this profile",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "remove_role",
          "in" : "query",
          "description" : "Allows those with permission to remove one of the following roles: event_organizer, coorganizer, assistant_organizer\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "intro",
          "in" : "query",
          "description" : "Provides a Member an opportunity to tell the group about themselves",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "title",
          "in" : "query",
          "description" : "An organizer-defined member title.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "answer_{qid}",
          "in" : "query",
          "description" : "Answers to questions from groups API join_info question fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "site_name",
          "in" : "query",
          "description" : "Name of member's site. Max length is 32",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "site_url",
          "in" : "query",
          "description" : "Link to member's site. Max length is 80",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "new_photo",
          "in" : "query",
          "description" : "file upload for a new member photo",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "add_role",
          "in" : "query",
          "description" : "Allows those with permission to assign one of the following roles: event_organizer, coorganizer, assistant_organizer\r\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "401" : {
            "description" : "401 Unauthorized is returned if the currently authenticated member can not edit the specified profile.",
            "schema" : {
              "$ref" : "#/definitions/profile"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a member's group profile (Leave Group)\r\n\r\n#Request Parameters\r\nAll parameters are optional. Only the authorized member is permitted leave groups they do not organize. This method may not be used by organizers to remove members.\r\n",
        "description" : "Deletes a member's group profile (Leave Group)\r\n\r\n#Request Par...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "exit_comment",
          "in" : "query",
          "description" : "Optional message to the organizer when leaving",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "mid",
        "in" : "path",
        "description" : "The mid is a member IDs",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "gid",
        "in" : "path",
        "description" : "The gid is a group ID",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/2/profiles" : {
      "get" : {
        "summary" : "This method returns member profiles associated with a particular group. Meetup members have separate profiles for each group they join.\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group. If querying for member_id alone, the member's 'hide groups' preference will be honored. 'Interesting' ordered searches only support searching by group_urlname or group_id. Only one of those may be supplied.\r\n",
        "description" : "This method returns member profiles associated with a partic...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "comma delimited list of optional response properties. A value of \"membership_dues\" will populate membership dues for the authorized user or members of the groups the authorized user organizes",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Return comments in groups with these ID numbers, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Return comments for the given member_ids, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status filter for members. Only organizers may see pending. Request must also contain a `group_id` or `group_urlname`. Status may be one of active, pending",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "groupnum",
          "in" : "query",
          "description" : "{topic, groupnum} - Group identification by topic, deprecated\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|interesting|Order which may be interesting to the authorized member|\r\n|joined|time member joined this group|\r\n|member_id|the id of the member|\r\n|name|the name of the member|\r\n|updated|profile updated field|\r\n|visited|last visit to group pages (default order)|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "if \"leads\", only profiles for members of the leadership team are included",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Return profiles for the group with the given custom URL path",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "topic",
          "in" : "query",
          "description" : "{topic, groupnum} - Group identification by topic, deprecated\r\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|additional|Additional information supplied by the member|\r\n|answers|Answers to group profile questions. Unanswered questions will be returned without an answer property if \"empty_answers\" is provided as a \"fields\" property value|\r\n|attendance_count|Optional fields property representing number of times the member has attended a Meetup in the associated group.|\r\n|bio|Member's 'introduction' to the group|\r\n|comment|What this member says about this group|\r\n|created, updated|When this member profile was created and last updated, in milliseconds since the epoch.|\r\n|group|The group this profile belongs to|\r\n|member_city|Optional fields parameter for the Member's city|\r\n|member_country|Optional fields parameter for the Member's country code|\r\n|member_id|The member's id|\r\n|member_state|Optional fields parameter for the Member's state (when country is us)|\r\n|membership_dues|Optional fields parameter for the last payment received for the Group's membership dues and optionally, the status of the member's dues for the current billing period if the group has set up recurring membership dues payments. This field is only visible only to the organizer of the group and to the member themselves. Members can not see other member's membership dues|\r\n|name|The member's name|\r\n|other_services|Third-party services associated with the member account|\r\n|photo|The member's photo if available|\r\n|photo_url|Link to the group profile photo of the member|\r\n|profile_url|Link to the member's group profile page|\r\n|role|If applicable, the member's role in the group (Organizer, Assistant Organizer, Co-organizer, or Event Organizer)|\r\n|site_url, site_name|External site listed by the member|\r\n|status|Value may be one of pending_payment, blocked, active, pending|\r\n|title|Title assigned to the member in this group|\r\n|visited|Member's last visit to the group site, in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/profiles"
            }
          }
        }
      }
    },
    "/2/topic_categories" : {
      "get" : {
        "summary" : "Returns a list of Meetup topic categories\r\n\r\n#Request Parameters\r\nNo parameters required parameters\r\n",
        "description" : "Returns a list of Meetup topic categories\r\n\r\n#Request Paramete...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "{lat,lon,radius} - Use a given lat/lon/radius (miles) to search best_topics for instead of using the member's lat/lon. When present, all three are required.\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Parameter for requesting optional response properties",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|shortname|(default order) ascending|\r\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|best_topics|Optional fields parameter representing the best topic matches for the category|\r\n|category_ids|list of category ids associated with this topic category|\r\n|name|Display name of the category|\r\n|photo|A photo representing the category|\r\n|shortname|String identifier of the category|\r\n|topic|A topic linked to the category|\r\n",
            "schema" : {
              "$ref" : "#/definitions/topicCategories"
            }
          }
        }
      }
    },
    "/activity" : {
      "get" : {
        "summary" : "API method for retrieving the activity feed for a member's groups",
        "description" : "API method for retrieving the activity feed for a member's g...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "page_start",
          "in" : "query",
          "description" : "Starting timestamp for item to return.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Returns activity from this member's groups. Must be authenticated as this member",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|group_id|Unique ID of the group where the action took place.|\r\n|group_name|Name of the group where the action took place.|\r\n|id|Unique identifier for the feed item.|\r\n|item_type|Type of activity that occurred. One of: new_member, chapter_greeting, photo_upload, new_discussion, new_reply, new_rsvp, edit_rsvp, photo_tag, photo_comment, new_checkin|\r\n|link|URL to the content represented in the action.|\r\n|member_id|ID of member who performed the action.|\r\n|member_name|Member who performed the action.|\r\n|photo_url|Link to the profile photo of the member represented (except in the case of photo actions, where the photo URL is used instead).|\r\n|published|Date and time of when the action occurred.|\r\n|title|A short description of the action that occurred.|\r\n",
            "schema" : {
              "$ref" : "#/definitions/feed"
            }
          }
        }
      }
    },
    "/batch" : {
      "post" : {
        "summary" : "Performs multiple API requests in batch, useful for reducing HTTP network requests. This method is only available for OAuth authentication\r\n\r\n#Request Parameters\r\nYou may supply up to 10 API requests in one batch request using the required \"requests\" parameter. Each of these individual batched requests will be tallied separately the same way they would when making individual requests. The batch request itself will not be tallied. As such, batch requests can not be rate limited. The only failures that you should account for are an authentication failure or a malformed JSON encoding of requests provided with the \"requests\" parameter.\r\n\r\n#Composing batch requests\r\nRequests should be provided within a JSON-encoded array in the following format attached the requests parameter within a POST body\r\n  \r\n <pre><code>[{\r\n   \"path\": \"/2/member/self\",\r\n   \"ref\":  \"me\",\r\n   \"params\": {\r\n     \"only\": \"name,id\"\r\n   }\r\n }]</code></pre>\r\n\r\nOnly \"path\" is required. \"path\" represents the API path for the method. \"ref\" provides a way to tag a request in a batch with a label that you can associated with its response in the body of the batch response. This will default to the provided \"path\". You may also supply a \"params\" key with a JSON object representing the parameters provided for the request. At this time only HTTP GET requests are supported. In the future we may also support POST and DELETE requests. When that happens you may indicate the HTTP method with the \"method\" key which may be one of \"GET\", \"POST\", or \"DELETE\". For now you may omit \"method\" as it will always be \"GET\" until other HTTP methods are supported.\r\n\r\n#Interpreting batch responses\r\nA response to a batch request will be in the format\r\n\r\n<pre><code>[{\r\n   \"path\": \"/2/member/self\"\r\n   \"status\": 200,\r\n   \"ref\": \"me\",\r\n   \"body\": {\r\n     \"id\": 1234,\r\n     \"name\": \"Noah\"\r\n   },\r\n   \"headers\": {\r\n     \"key\": \"value\"\r\n    }\r\n }]</code></pre>\r\n\r\n\"path\" is the path of the method invoked. \"status\" represents the HTTP status code returned for the request. \"ref\" is the name provided for the inbound request. \"body\" is the JSON-encoded response from the given API request. \"headers\" is a JSON-encoded object representing the headers returned for that request. These requests may fail the same way they would when making individual requests. The response will indicate these failures.\r\n\r\nIn order to preserve server resources and return batch responses within a reasonable amount of time, individual requests may will timeout if a response is not computed within a reasonable amount of time. This allows for some requests to fail and others to pass which is a nicer alternative to an all or nothing response timeout. A timed out request can be identified by inspecting its response's \"status\" field for a value of 504. A timed out response may look like.\r\n\r\n<pre><code>[{\r\n   \"status\" : 504,\r\n   \"body\" : {\r\n    \"errors\" : [{\"code\": \"request_timeout\", \"message\":\"request timed out\"}]\r\n   },\r\n   \"headers\" : { ... },\r\n   \"path\" : \"/end/point\",\r\n   \"ref\" : \"request_ref\"\r\n }]</code></pre>\r\n",
        "description" : "Performs multiple API requests in batch, useful for reducing...",
        "operationId" : "POST",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "requests",
          "in" : "query",
          "description" : "JSON-encoding of multiple request objects as described in the parameter notes",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "(Untitled)",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/model609"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The response will be a JSON-encoded array of responses to requests defined in the batch request\r\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/batch"
              }
            }
          }
        }
      }
    },
    "/dashboard" : {
      "get" : {
        "summary" : "A dashboard of aggregated Meetup information for the authorized member. No parameters are required.",
        "description" : "A dashboard of aggregated Meetup information for the authori...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|last_event|The last meetup the current member RSVP'd to|\r\n|next_event|The next meetup event the current member has RSVP'd to|\r\n|ongoing_event|The meetup event the current member has RSVP'd to that's currently happening|\r\n|stats|A map of statistics for the current member|\r\n",
            "schema" : {
              "$ref" : "#/definitions/dashboard"
            }
          }
        }
      }
    },
    "/ew/comment" : {
      "post" : {
        "summary" : "Comment Create\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request. The comment is always entered for the current authenticated member. This method requires an HTTP POST.\r\n",
        "description" : "Comment Create\r\n\r\n#Request Parameters\r\nAt least one of the requ...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "comment",
          "in" : "query",
          "description" : "comment content",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|time|Comment date and time|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "ID of the event to comment on",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parent_id",
          "in" : "query",
          "description" : "ID of parent, if threaded",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      }
    },
    "/ew/comments" : {
      "get" : {
        "summary" : "Comment Query\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request, and multiple query values may be separated with commas.\r\n",
        "description" : "Comment Query\r\n\r\n#Request Parameters\r\nAt least one of the requi...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|time|Comment date and time|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_status",
          "in" : "query",
          "description" : "Status may be \"upcoming\", \"past\" or both separated by a comma. The default is \"upcoming\" only",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "one or more container IDs",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parent_comment_id",
          "in" : "query",
          "description" : "ID of a parent comment, to find its children",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas. \"urlname\" or \"container_id\" is also required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "one or more container urlnames",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comment_id",
          "in" : "query",
          "description" : "one or more comment IDs",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "one or more member IDs",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "one or more event IDs",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Comment Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereComments"
            }
          }
        }
      }
    },
    "/ew/communities" : {
      "get" : {
        "summary" : "Communities Query\r\n\r\n#Request Parameters\r\nat least one of the required parameter(s) must be supplied with the request.\r\ncountry, city and state are regarded as the one parameter.\r\nlat, lon are regarded as the one parameter.\r\n",
        "description" : "Communities Query\r\n\r\n#Request Parameters\r\nat least one of the r...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "For the US, state code is required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas. \"urlname\" or \"container_id\" is also required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "A US zip or Canadian postal code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Community Get (\"/ew/community/:id\")",
            "schema" : {
              "$ref" : "#/definitions/everywhereCommunities"
            }
          }
        }
      }
    },
    "/ew/community" : {
      "post" : {
        "summary" : "Community Create\r\n\r\n#Request Parameters\r\nAn identifier for the container is required as well at least one location parameter set. Other location details may be filled out automatically. This method requires an HTTP POST.\r\n\r\n|||\r\n|-|\r\n|country, city, state|May serve as the required location parameter set. Country code and city name. For the US, a state code is also required|\r\n|lat, lon|May serve as the required location parameter set.|\r\n",
        "description" : "Community Create\r\n\r\n#Request Parameters\r\nAn identifier for the ...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "urlname",
          "in" : "query",
          "description" : "May serve as the required identifier of the container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "May serve as the required location parameter set. Country code and city name. For the US, a state code is also required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "May serve as the required identifier of the container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name of the community",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "A US zip or Canadian postal code. May serve as the required location parameter set",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method returns a 201 Created response with a Location header containing the Community Get method for this community. The content body is the same as that returned by Community Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereCommunity"
            }
          }
        }
      }
    },
    "/ew/container" : {
      "post" : {
        "summary" : "Container Create\r\n\r\n#Request Parameters\r\nThe required name parameter must be supplied with the request. This method requires an HTTP POST.\r\n",
        "description" : "Container Create\r\n\r\n#Request Parameters\r\nThe required name para...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "facebook_urlname",
          "in" : "query",
          "description" : "path name without slashes",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "link_name",
          "in" : "query",
          "description" : "Name of link",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "twitter_urlname",
          "in" : "query",
          "description" : "account name, no slash or @",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "link",
          "in" : "query",
          "description" : "must be a URL",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name of this container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Description of this container",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "If successful, this method returns a 200 OK response. The content body is the same as that returned by Container Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereContainer"
            }
          }
        }
      }
    },
    "/ew/container/{id}" : {
      "get" : {
        "summary" : "Container Get\r\n\r\n#Request Parameters\r\nNormal authorization parameters are required. The output may be adjusted as normal with format, as well as a fields specifier\r\n",
        "description" : "Container Get\r\n\r\n#Request Parameters\r\nNormal authorization para...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|countries|List of two-letter country codes where meetups have been scheduled in this container. Only included if requested in the fields parameter.|\r\n|created|Container created time, in milliseconds since the epoch|\r\n|description|Container description|\r\n|facebook_urlname|Facebook page associated with this container|\r\n|founder|Founder for this container|\r\n|id|The ID of the container|\r\n|link|URL associated with this container, usually off-site|\r\n|link_name|Name of the resource at link|\r\n|meetup_count|Count of upcoming and pending meetups in this container. Only included if requested in the fields parameter.|\r\n|meetup_url|User-facing URL for this container on Meetup|\r\n|member_count|Count of unique members who have rsvp'd to a meetup in this container. Only included if requested in the fields parameter.|\r\n|name|The name of the container|\r\n|past_meetup_count|Count of past meetups in this container. Only included if requested in the fields parameter.|\r\n|theme|Custom appearance for this container, if any|\r\n|twitter_urlname|Twitter account name associated with this container|\r\n|udf_{varname}|Any User defined fields specified in the fields parameter|\r\n|updated|Container updated time, in milliseconds since the epoch|\r\n|urlname|URL path to the container, as in http://www.meetup.com/ (no slashes)|\r\n",
            "schema" : {
              "$ref" : "#/definitions/everywhereContainer"
            }
          }
        }
      },
      "post" : {
        "summary" : "(Untitled)",
        "description" : "(Untitled)",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "twitter_urlname",
          "in" : "query",
          "description" : "account name, no slash or @",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Description of this container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "link_name",
          "in" : "query",
          "description" : "Name of link",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "facebook_urlname",
          "in" : "query",
          "description" : "path name without slashes",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "link",
          "in" : "query",
          "description" : "must be a URL",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name of this container",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "If successful, this method returns a 200 OK response. The content body is the same as that returned by Container Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereContainer"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id in the path should be the id of a container",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/ew/container/{id}/alerts" : {
      "get" : {
        "summary" : "Alerts Get\r\n\r\n#Request Parameters\r\nNo parameters are required or considered other than for authorization and format.\r\n",
        "description" : "Alerts Get\r\n\r\n#Request Parameters\r\nNo parameters are required o...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "updates",
          "in" : "query",
          "description" : "Alert for updates to events, \"true\" or \"false\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rsvps",
          "in" : "query",
          "description" : "Alert for each rsvp, \"true\" or \"false\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "comments",
          "in" : "query",
          "description" : "Alert for each comment, \"true\" or \"false\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : { }
      },
      "post" : {
        "summary" : "Alerts Edit\r\n\r\n#Request Parameters\r\nAll parameters are optional, updates alerts for the authenticated user. This method requires an HTTP POST.\r\n",
        "description" : "Alerts Edit\r\n\r\n#Request Parameters\r\nAll parameters are optional...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "comments",
          "in" : "query",
          "description" : "Alert for each comment, \"true\" or \"false\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rsvps",
          "in" : "query",
          "description" : "Alert for each rsvp, \"true\" or \"false\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "updates",
          "in" : "query",
          "description" : "Alert for updates to events, \"true\" or \"false\"",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : ":id in the path should be the id of a container",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/ew/containers" : {
      "get" : {
        "summary" : "Container Query\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request.\r\n",
        "description" : "Container Query\r\n\r\n#Request Parameters\r\nAt least one of the req...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "link",
          "in" : "query",
          "description" : "External URL associated with the container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "URL path to the container, as in http://www.meetup.com/ (no slashes)\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "ID of the container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Container Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereContainers"
            }
          }
        }
      }
    },
    "/ew/event" : {
      "post" : {
        "summary" : "Event Create\r\n\r\n#Request Parameters\r\nAn identifier for the community is required as well at least one location parameter set. Other location details may be filled out automatically. This method requires an HTTP POST. If you are not the founder of this container you will automatically be rsvp'd for the event\r\n",
        "description" : "Event Create\r\n\r\n#Request Parameters\r\nAn identifier for the comm...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "zip",
          "in" : "query",
          "description" : "A US zip or Canadian postal code. May serve as the required location parameter set.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "short_description",
          "in" : "query",
          "description" : "short description of the event",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "{urlname, community_urlname} Together, may serve as the required identifier of the event community\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "address1",
          "in" : "query",
          "description" : "street address; specify an empty string if you want to prevent this from being inferred from other parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "description of the event",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "link",
          "in" : "query",
          "description" : "Link associated with the event. Displayed on the event page, and users are prompted to follow this link after indicating interest.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "local_time",
          "in" : "query",
          "description" : "Alternative to the time parameter for applications that can not easily calculate an event's UTC time. If you know the wall-clock time and location for an event but do not know its UTC offset, you can supply a local_time and Meetup will apply the appropriate offset. The format for this parameter is milliseconds since the epoch as if the event occurred in a UTC zone.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas. \"urlname\" or \"container_id\" is also required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "venue_name",
          "in" : "query",
          "description" : "Name of the place where the event will happen",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "time",
          "in" : "query",
          "description" : "event start time in milliseconds since the epoch. If the container has a default time value it will be used when no time is supplied, otherwise the event will be created without a time.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method returns a 201 Created response with a Location header containing the Event Get method for this event. The content body is the same as that returned by Event Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereEvent"
            }
          }
        }
      }
    },
    "/ew/events" : {
      "get" : {
        "summary" : "Event Query\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request.\r\n\r\nDate Formatting: Parameters for dates can be specified in absolute or relative terms. Absolute dates are specified in numbers only: MMDDYYYY. Relative dates are specified in days d, weeks w, or months m before or after today. Tomorrow is \"1d\", yesterday is \"-1d\"; three weeks from now is \"3w\", and six months ago is \"-6m\". These can be used with after and before to define a time window in a static request that advances with the actual date.\r\n",
        "description" : "Event Query\r\n\r\n#Request Parameters\r\nAt least one of the require...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "Return events scheduled before the specified date, formatted as described below",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|time|Event date and time|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Return events scheduled after the specified date, formatted as described below",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid country code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas. \"urlname\" or \"container_id\" is also required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "A US zip or Canadian postal code",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Return events matching one of the given status values, separated by commas. Possible statuses are \"pending\", \"upcoming\", and \"past\". The default status parameter is \"past,pending,upcoming\".",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "A valid city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "ID of an event",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Event Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereEvents"
            }
          }
        }
      }
    },
    "/ew/follow" : {
      "post" : {
        "summary" : "Community Follow Create\r\n\r\n#Request Parameters\r\nat least one of the required parameter(s) must be supplied with the request. The follow is always applied for the current authenticated member. This method requires an HTTP POST.\r\n",
        "description" : "Community Follow Create\r\n\r\n#Request Parameters\r\nat least one of...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "ID of the community to follow.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method returns a 201 Created response with a Location header containing the Community Follow Get method for this event. The content body is the same as that returned by Community Follow Get",
            "schema" : {
              "$ref" : "#/definitions/everywhereFollow"
            }
          }
        }
      }
    },
    "/ew/followers" : {
      "get" : {
        "summary" : "Community Followers\r\n\r\n#Request Parameters\r\nThis method requires at least one of the following parameters: \"container_id\", \"community_id\", \"urlname\" or \"community_urlname\"\r\n",
        "description" : "Community Followers\r\n\r\n#Request Parameters\r\nThis method require...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "Up to five container URL names, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "community_urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas. \"urlname\" or \"container_id\" is also required",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "One or more container IDs, separated by commas",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Community Follow Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereFollowers"
            }
          }
        }
      }
    },
    "/ew/follows" : {
      "get" : {
        "summary" : "Community Follows Query\r\n\r\n#Request Parameters\r\nNo parameters are required. If no parameters are provided, then all communities followed by the authenticated user will be included in the response.\r\n",
        "description" : "Community Follows Query\r\n\r\n#Request Parameters\r\nNo parameters a...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "container_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Community Follow Get",
            "schema" : {
              "$ref" : "#/definitions/everywhereFollows"
            }
          }
        }
      }
    },
    "/ew/rsvp" : {
      "post" : {
        "summary" : "RSVP Create\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request. The RSVP is always applied for the current authenticated member. This method requires an HTTP POST.\r\n",
        "description" : "RSVP Create\r\n\r\n#Request Parameters\r\nAt least one of the require...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "ID of an event",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method returns a 201 Created response with a Location header containing the RSVP Get method for this event. The content body is the same as that returned by RSVP Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereRsvp"
            }
          }
        }
      }
    },
    "/ew/rsvps" : {
      "get" : {
        "summary" : "RSVPs Query\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request, and multiple query values may be separated with commas.\r\n",
        "description" : "RSVPs Query\r\n\r\n#Request Parameters\r\nAt least one of the require...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "query",
          "description" : "ID of an event",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "ID of a member",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in RSVP Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereRsvps"
            }
          }
        }
      }
    },
    "/ew/seed" : {
      "post" : {
        "summary" : "Event Seed Create\r\nFor container owners. API method for creating an event to seed to all communities.\r\n\r\n#Request Parameters\r\nAn identifier for the container is required as well as the short_description. This method requires an HTTP POST.\r\n",
        "description" : "Event Seed Create\r\nFor container owners. API method for creat...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "short_description",
          "in" : "query",
          "description" : "short description of the event seed",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "local_time",
          "in" : "query",
          "description" : "local time for event to happen globally in milliseconds since the epoch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "May serve as the required identifier of the event seed container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "May serve as the required identifier of the event seed container",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "description of the event seed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "If successful, this method returns a 201 Created response with a Location header containing the Event Seed Get method for this event. The content body is the same as that returned by Event Seed Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereEventSeed"
            }
          }
        }
      }
    },
    "/ew/seeds" : {
      "get" : {
        "summary" : "Event Seeds Query\r\nFor container owners. API method for accessing events seeded to communities.\r\n\r\n#Request Parameters\r\nAt least one of the required parameter(s) must be supplied with the request.\r\n",
        "description" : "Event Seeds Query\r\nFor container owners. API method for acces...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "urlname",
          "in" : "query",
          "description" : "Up to five URL paths, separated by commas",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "seed_id",
          "in" : "query",
          "description" : "ID of an event",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "community_urlname",
          "in" : "query",
          "description" : "Up to fine urlpaths, separated by commas.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Return event seeds matching one of the given status values, separated by commas. Possible statuses are \"pending\", \"active\", or \"archived\". The default status parameter is \"active,archived\".",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "udf_{varname}",
          "in" : "query",
          "description" : "User defined fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|short_description|Event seed short description|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "container_id",
          "in" : "query",
          "description" : "One or more IDs, separated by commas",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Each item in the results list for a JSON or XML request will contain the fields listed in Event Seed Get.",
            "schema" : {
              "$ref" : "#/definitions/everywhereEventSeeds"
            }
          }
        }
      }
    },
    "/find/groups" : {
      "get" : {
        "summary" : "Text, location, category and friend-based group searches\r\n\r\n#Request Parameters\r\nAll parameters are optional. If you do not supply some form of location, the results will be implicitly based on your IP's geographic location. See the 'filter' parameter for more information controlling the results returned. Ordering does not apply to friend-filtered queries.\r\n",
        "description" : "Text, location, category and friend-based group searches\r\n\r\n#R...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "text",
          "in" : "query",
          "description" : "Raw full text search query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "self_groups",
          "in" : "query",
          "description" : "set to 'include' or 'exclude' meetups the authorized member belongs to; default is 'include'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Comma-delimited list of numeric category ids",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|distance|Order by distance|\r\n|members|Order by number of members|\r\n|most_active|Order by group with most active members|\r\n|newest|Order by date group was founded|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "Raw text location query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid two character country code, defaults to US",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "Zipcode of location to limit search to",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "upcoming_events",
          "in" : "query",
          "description" : "If true, filters text and category based searches on groups that have upcoming events. Defaults to false",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Determines which groups are returned. If 'all' (default), the text and category parameters are applied. If 'friends', groups your friends are in are returned. The value of this parameter may be one of all, friends",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|category|The primary category of the group, if the group has one|\r\n|city|City of the group|\r\n|country|Country of the group|\r\n|created|Time the group was created in milliseconds since the epoch|\r\n|description|Short description of group|\r\n|ga_code|Optional field return the google analytics code for the group. Only members that can edit group settings can see this|\r\n|group_photo|Group photo|\r\n|id|Numeric group ID|\r\n|is_simplehtml|Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.|\r\n|join_info|Optional field, lists any questions requested when joining and required fields|\r\n|join_mode|Who can join this group and how. One of approval, closed, open|\r\n|lat|Latitude|\r\n|link|Link to group on meetup.com|\r\n|list_addr|Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this|\r\n|list_mode|Optional fields parameter representing the policy for who can post the the group mailing list. One of moderated, off, open, orgs_only|\r\n|lon|Longitude|\r\n|members|Number of Meetup members in this group|\r\n|name|Name of the group|\r\n|next_event|The next upcoming event, if the group has one|\r\n|organizer|Group's primary organizer|\r\n|photos|A small set of photos from the group|\r\n|simple_html_description|Description of the group, in simple HTML format. This value is translated to HTML to update the description.|\r\n|state|State of the group, if in US or Canada|\r\n|timezone|This represents the universal timezone identifier for the group|\r\n|urlname|Urlname used to identify the group on meetup.com|\r\n|visibility|Who can see this group. One of members, public or public_limited|\r\n|who|What the group calls its members|\r\n",
            "schema" : {
              "$ref" : "#/definitions/groups"
            }
          }
        }
      }
    },
    "/oembed" : {
      "get" : {
        "summary" : "oEmbed implementation\r\n\r\n#Request Parameters\r\nThis method does not require authentication. It requires only a url parameter and responds according to the OEmbed specification. Any of the following base URLs may refer to embeddable content:\r\n\r\nhttp://www.meetup.com/\r\nhttp://meetup.com/\r\nhttp://meetu.ps/\r\nAn optional maxwidth parameter may be provided.\r\n",
        "description" : "oEmbed implementation\r\n\r\n#Request Parameters\r\nThis method does ...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "description" : "url of resource to be embedded",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxwidth",
          "in" : "query",
          "description" : "maximum width to display",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      }
    },
    "/recommended/groups" : {
      "get" : {
        "summary" : "Returns groups Meetup finds relevant to you\r\n\r\n#Request Parameters\r\nAll parameters are optional. You may change the 'location' and 'radius' for the request. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned.\r\n",
        "description" : "Returns groups Meetup finds relevant to you\r\n\r\n#Request Parame...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "Zip code you are searching for recommendations in",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "A valid category id which limits recommended groups to a particular category",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "Raw text location query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid two character country code, defaults to US",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Request that additional fields (separated by commas) be included in the output.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "topic_id",
          "in" : "query",
          "description" : "Comma delimited list of up to 100 topic ids to help inform recommendations",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|category|The primary category of the group, if the group has one|\r\n|city|City of the group|\r\n|country|Country of the group|\r\n|created|Time the group was created in milliseconds since the epoch|\r\n|description|Short description of group|\r\n|ga_code|Optional field return the google analytics code for the group. Only members that can edit group settings can see this|\r\n|group_photo|Group photo|\r\n|id|Numeric group ID|\r\n|is_simplehtml|Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.|\r\n|join_info|Optional field, lists any questions requested when joining and required fields|\r\n|join_mode|Who can join this group and how. One of approval, closed, open|\r\n|lat|Latitude|\r\n|link|Link to group on meetup.com|\r\n|list_addr|Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this|\r\n|list_mode|Optional fields parameter representing the policy for who can post the the group mailing list. One of moderated, off, open, orgs_only|\r\n|lon|Longitude|\r\n|members|Number of Meetup members in this group|\r\n|name|Name of the group|\r\n|next_event|The next upcoming event, if the group has one|\r\n|organizer|Group's primary organizer|\r\n|photos|A small set of photos from the group|\r\n|simple_html_description|Description of the group, in simple HTML format. This value is translated to HTML to update the description.|\r\n|state|State of the group, if in US or Canada|\r\n|timezone|This represents the universal timezone identifier for the group|\r\n|urlname|Urlname used to identify the group on meetup.com|\r\n|visibility|Who can see this group. One of members, public or public_limited|\r\n|who|What the group calls its members|\r\n",
            "schema" : {
              "$ref" : "#/definitions/groups"
            }
          }
        }
      }
    },
    "/recommended/venues" : {
      "get" : {
        "summary" : "Returns venues Meetup finds relevant to you based on location and category. This method does not yet support sorting or pagination.\r\n\r\n#Request Parameters\r\nAll parameters are optional. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned.\r\n",
        "description" : "Returns venues Meetup finds relevant to you based on locatio...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_urlname",
          "in" : "query",
          "description" : "Comma-delimited list of up to 200 group urlnames to help inform recommendations",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Radius in miles",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "used_between",
          "in" : "query",
          "description" : "Return venues that have been used within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Comma-delimited list of up to 200 category ids to help inform recommendations",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lat",
          "in" : "query",
          "description" : "Latitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group_id",
          "in" : "query",
          "description" : "Comma-delimited list of up to 200 group ids to help inform recommendations",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "Zip code you are searching for recommendations in",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "Raw text location query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lon",
          "in" : "query",
          "description" : "Longitude to search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "min_groups",
          "in" : "query",
          "description" : "The minimum number of groups that have hosted events at this venue",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "A valid two character country code, defaults to US",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|address_1|If available, the first address line of the venue|\r\n|address_2|If available, the second address line of the venue|\r\n|address_3|If available, the third address line of the venue|\r\n|city|If available, the name of the venue's city|\r\n|country|If available, the name of the venue's country code|\r\n|id|ID, of the venue|\r\n|lat|If available, the venue's latitude|\r\n|lon|If available, the venue's longitude|\r\n|name|If available, the venue's name|\r\n|phone|If available, the venue's photo number|\r\n|state|If available and the venue's country id within the US or Canada, the venue's state|\r\n|visibility|'private' if this venue is a private home, otherwise 'public'|\r\n|zip|If available, the venue's zipcode|\r\n",
            "schema" : {
              "$ref" : "#/definitions/groupVenues"
            }
          }
        }
      }
    },
    "/{urlname}" : {
      "post" : {
        "summary" : "Allows organizers to edit their Meetup group information. To change group topics, see the add and remove topics endpoints. To change group photo use the Group photo upload endpoint\r\n\r\n#Request Parameters\r\nAll parameters are optional.\r\n",
        "description" : "Allows organizers to edit their Meetup group information. To...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "list_mode",
          "in" : "query",
          "description" : "Defines policy for who can post to the group mailing list. May be one of 'open' meaning any Member can post, 'off' meaning no one can post, 'moderated' meaning messages must be approved, or 'orgs_only' meaning only organizers may post to the list",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "questions_req",
          "in" : "query",
          "description" : "Indicates that provide questions are required before joining. Expects true or false values",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "intro_req",
          "in" : "query",
          "description" : "Indicates that a member must supply an introduction before joining. Expects true or false values",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "who",
          "in" : "query",
          "description" : "What members of the group will be called. Can be at most 32 characters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "urlname",
          "in" : "query",
          "description" : "Name used for the groups web address on meetup.com. Must be between 6 and 60 characters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Summary of what the Meetup group is about in simple HTML format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "The ISO_3166-1 country code for the country which contains the city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "join_mode",
          "in" : "query",
          "description" : "Controls how member's are let into the group. May be one of 'open' meaning any Meetup member my join, 'closed' meaning group is not currently accepting new members, or 'approval' meaning members must be approved by an organizer. Note, the 'closed' options is only available to groups that already have a 'closed' join_mode",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "list_addr",
          "in" : "query",
          "description" : "Mailing list prefix. By default this is the Group's urlname.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Display name of the group. Can be at most 60 characters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ga_code",
          "in" : "query",
          "description" : "Google analytics code for group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "{service}_uri",
          "in" : "query",
          "description" : "A URI for a social network service. Service must be one of facebook, flickr, linkedin, other, tumblr, twitter",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "zip",
          "in" : "query",
          "description" : "The zip code of the city",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "question_{index}",
          "in" : "query",
          "description" : "A new profile question defined in the order of index provided in the request parameter name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "question_edit_{id}",
          "in" : "query",
          "description" : "Edits a current profile question identified by an id in the parameter name. The index updated index should also be encoded in the parameter name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "photo_req",
          "in" : "query",
          "description" : "Indicates that a member must provide a photo before joining. Expects true or false values",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "visibility",
          "in" : "query",
          "description" : "Restricts group visibility for non-members. May be one of 'public', 'public_limited' or 'members'. Note, the 'members' option is only available to groups that already have 'members' visibility",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "dryrun",
          "in" : "query",
          "description" : "Boolean parameter that will cause this endpoint to apply all validation rules without actually saving changes in which case the response will only reflect the group's current attributes",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "welcome_message",
          "in" : "query",
          "description" : "Message sent to members after they join. Can be at most 2000 characters",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|category|The primary category of the group, if the group has one|\r\n|city|City of the group|\r\n|country|Country of the group|\r\n|created|Time the group was created in milliseconds since the epoch|\r\n|description|Short description of group|\r\n|ga_code|Optional field return the google analytics code for the group. Only members that can edit group settings can see this|\r\n|group_photo|Group photo|\r\n|id|Numeric group ID|\r\n|is_simplehtml|Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.|\r\n|join_info|Optional field, lists any questions requested when joining and required fields|\r\n|join_mode|Who can join this group and how. One of approval, closed, open|\r\n|lat|Latitude|\r\n|link|Link to group on meetup.com|\r\n|list_addr|Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this|\r\n|list_mode|Optional fields parameter representing the policy for who can post the the group mailing list. One of moderated, off, open, orgs_only|\r\n|lon|Longitude|\r\n|members|Number of Meetup members in this group|\r\n|name|Name of the group|\r\n|next_event|The next upcoming event, if the group has one|\r\n|organizer|Group's primary organizer|\r\n|photos|A small set of photos from the group|\r\n|simple_html_description|Description of the group, in simple HTML format. This value is translated to HTML to update the description.|\r\n|state|State of the group, if in US or Canada|\r\n|timezone|This represents the universal timezone identifier for the group|\r\n|urlname|Urlname used to identify the group on meetup.com|\r\n|visibility|Who can see this group. One of members, public or public_limited|\r\n|who|What the group calls its members|\r\n",
            "schema" : {
              "$ref" : "#/definitions/group"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/boards" : {
      "get" : {
        "summary" : "Listings of Group discussion boards",
        "description" : "Listings of Group discussion boards",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Order",
          "in" : "query",
          "description" : "How to order the results",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|created|Time board was created in milliseconds since the epoch|\r\n|discussion_count|Number of discussions on this board|\r\n|group|The group associated with this board|\r\n|id|Numeric ID of discussion board|\r\n|latest_reply|The latest reply on this board|\r\n|name|Discussion board name|\r\n|post_count|Number of posts in discussions on this board|\r\n|updated|Time board was updated in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/boards"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/boards/{bid}/discussions" : {
      "get" : {
        "summary" : "Listings of Group discussions",
        "description" : "Listings of Group discussions",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "Order",
          "in" : "query",
          "description" : "|value|description|\r\n|-|\r\n|last_post_date|(default) by post date|\r\n|member_name|by posting member's name|\r\n|thread_reply_count|by the threads reply count|\r\n|thread_view_count|by the number of views a thread has|\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Omit",
          "in" : "query",
          "description" : "You can suppress result fields by specifying omit parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Descending",
          "in" : "query",
          "description" : "Reverses the sorting order, when you include the parameter \"desc=desc\" or \"desc=true\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Offset",
          "in" : "query",
          "description" : "The starting page for results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "Only",
          "in" : "query",
          "description" : "You can select result fields by specifying only parameters",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Page Size",
          "in" : "query",
          "description" : "The page size",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|board|The board this discussion belongs to|\r\n|body|The contents of the first post in this discussion|\r\n|created|Time board was created in milliseconds since the epoch|\r\n|id|Numeric discussion ID|\r\n|last_post|The last post made in this discussion|\r\n|reply_count|Number of replies this discussion has|\r\n|started_by|The member that started this discussion|\r\n|subject|The subject of the first post in this discussion|\r\n|updated|Time board was updated in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/discussions"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "bid",
        "in" : "path",
        "description" : "The :bid path element may be any valid board ID for this group.",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/boards/{bid}/discussions/{did}" : {
      "get" : {
        "summary" : "Listing Group discussion posts",
        "description" : "Listing Group discussion posts",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|body|content of the post|\r\n|created|Time post was created in milliseconds since the epoch|\r\n|discussion|The discussion this was posted in|\r\n|id|Numeric post ID|\r\n|in_reply_to|ID of the post this was in reply to|\r\n|member|The member that started this discussion|\r\n|subject|subject of the post|\r\n|updated|Time post was updated in milliseconds since the epoch|\r\n",
            "schema" : {
              "$ref" : "#/definitions/discussion"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "did",
        "in" : "path",
        "description" : "The :did may be any valid discussion ID for this board",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "bid",
        "in" : "path",
        "description" : "The :bid path element may be any valid board ID for this group.",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/events/{id}/attendance" : {
      "get" : {
        "summary" : "Lists attendance records for Meetup events. Limited for use by administrative members.",
        "description" : "Lists attendance records for Meetup events. Limited for use ...",
        "operationId" : "GET",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "member",
          "in" : "query",
          "description" : "Raw text used to search for member by name. This may only be applied when the filter parameter is set to 'all'. The provided text must consist of at least 2 characters.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A named filter to apply to the attendance list. These are roughly equivalent to the set of filters you will see in the attendance tool on the site. These filters correspond with attendance records as well as each member's original RSVP status. The filter value be one of: maybe, waitlist, yes, absent, all, attended, noshow, excused, no. The default is 'attended'. The 'absent' filter represents all members not in attendance including members with a 'noshow' status. An 'excused' absence is an absent member marked as such by an administrative member\r\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|member|Member in or not in attendance|\r\n|rsvp|RSVP, if member originally RSVP'd|\r\n|status|The member's attendance status. May be one of: noshow, absent, attended|\r\n",
            "schema" : {
              "$ref" : "#/definitions/attendance"
            }
          }
        }
      },
      "post" : {
        "summary" : "Takes Member attendance for an Event. Limted for use by administrative members.\r\n\r\n#Request Parameters\r\nThe :urlname path element may be any valid group urlname or domain name. The :id path element must be a valid alphanumeric Meetup event identifier. Highlighted fields are required\r\n",
        "description" : "Takes Member attendance for an Event. Limted for use by admi...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "headcount",
          "in" : "query",
          "description" : "Sets the overall headcount for the event. This may not necessarily correlate with the list of attendees in this group if the event is part of a joint Meetup event",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "guests",
          "in" : "query",
          "description" : "The number of guests accompanying member. Maximum of 99 is allowed.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "An attendance status for the member. Must be one of: noshow, absent, attended\r\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member",
          "in" : "query",
          "description" : "A valid ID of member in the group",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The :id path element must be a valid alphanumeric Meetup event identifier",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/events/{id}/payments" : {
      "post" : {
        "summary" : "Allows organizers of a group to note payments made by members for an event. This is the 'Mark Paid' feature seen in the RSVP listings on event details pages and affects the 'pay_status' response fields in 2/rsvps for paid events\r\n\r\n#Request Parameters\r\nOnly organizer may submit payment information for members and only one payment may be submitted for a member for a given event\r\n",
        "description" : "Allows organizers of a group to note payments made by member...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "amount",
          "in" : "query",
          "description" : "The monetary amount of money the member submited",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member",
          "in" : "query",
          "description" : "Member Id of member who made a payment",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "quantity",
          "in" : "query",
          "description" : "The number of payments made. Defaults to 1",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "paid_on",
          "in" : "query",
          "description" : "The time the payment was made in milliseconds from the epoc. Defaults to now",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "|||\r\n|-|\r\n|confirm_code|Confirmation code for the payment|\r\n|id|Unique identifier for the payment|\r\n",
            "schema" : {
              "$ref" : "#/definitions/payments"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The :id path element must be a valid alphanumeric Meetup event identifier",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/events/{id}/watchlist" : {
      "post" : {
        "summary" : "Add yourself to an event watch list to get notified when a spot becomes available\r\n\r\n#Request Parameters\r\nNo parameters are required. You should only call this method if you request the fields parameter 'self' in any events methods and get back a self.actions field containing 'watch'\r\n",
        "description" : "Add yourself to an event watch list to get notified when a s...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "A successful add will result in the json message {\"status\":\"watching\"}",
            "schema" : {
              "$ref" : "#/definitions/watching"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Remove yourself from an event watch list\r\n\r\n#Request Parameters\r\nNo parameters are required. You should only call this method if you request the fields parameter 'self' in any events methods and get back a self.actions field containing 'unwatch'\r\n",
        "description" : "Remove yourself from an event watch list\r\n\r\n#Request Parameter...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "A successful watchlist removal will result in the json message {\"status\":\"not_watching\"}. You may optionally send a fields parameter with the value of \"self\" to fetch rsvp_actions for the authenticated member",
            "schema" : {
              "$ref" : "#/definitions/notWatching"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The :id path element must be a valid alphanumeric Meetup event identifier",
        "required" : false,
        "type" : "string"
      }, {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/member/approvals" : {
      "post" : {
        "summary" : "Approves one or more requests for group membership\r\n\r\n#Request Parameters\r\nThe :urlname path element may be any valid group urlname or domain name. If you need access to your group's welcome message, you can access it from the /2/groups method, providing a value of welcome_message for the fields parameter. To get a list of pending members, as an organizer, you can request the status pending in the /2/profiles method.\r\n",
        "description" : "Approves one or more requests for group membership\r\n\r\n#Request...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "send_copy",
          "in" : "query",
          "description" : "Optional Boolean value indicating whether or not the org should receive a copy of the message sent to the approved members",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member",
          "in" : "query",
          "description" : "Comma-delimited numeric pending member IDs. The maximum allowed is 200",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "welcome_message",
          "in" : "query",
          "description" : "Optional message to send to the members being approved. If not provided, the groups default welcome message will be sent. Max message size is 2000",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      },
      "delete" : {
        "summary" : "Declines one or more requests for group membership\r\n\r\n#Request Parameters\r\nThe :urlname path element may be any valid group urlname or domain name. To get a list of pending members, as an organizer, you can request the status pending in the /2/profiles method.\r\n",
        "description" : "Declines one or more requests for group membership\r\n\r\n#Request...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "send_copy",
          "in" : "query",
          "description" : "Optional Boolean value indicating whether or to send a copy to the member issuing the decline. Default is true",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ban",
          "in" : "query",
          "description" : "Optional Boolean value indicating whether or not to ban the member in the future. Default is false",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "explanation",
          "in" : "query",
          "description" : "Optional explanation to send to the members being declined. Max message size is 2000",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "anon",
          "in" : "query",
          "description" : "Optional Boolean value indicating whether your email should be revealed to the members. Default is false.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "member",
          "in" : "query",
          "description" : "Comma-delimited numeric pending member IDs. The maximum allowed is 200",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : { }
      },
      "parameters" : [ {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    },
    "/{urlname}/topics" : {
      "post" : {
        "summary" : "Associates topics with a given Meetup Group. Limited to organizers of the group.\r\n\r\n#Request Parameters\r\nA group can have at most 15 topics\r\n",
        "description" : "Associates topics with a given Meetup Group. Limited to orga...",
        "operationId" : "POST",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "topic_id",
          "in" : "query",
          "description" : "Comma-delimited list of topic ids to associate with group",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response will include a representation of the group topics were added to\r\n|||\r\n|-|\r\n|category|The primary category of the group, if the group has one|\r\n|city|City of the group|\r\n|country|Country of the group|\r\n|created|Time the group was created in milliseconds since the epoch|\r\n|description|Short description of group|\r\n|ga_code|Optional field return the google analytics code for the group. Only members that can edit group settings can see this|\r\n|group_photo|Group photo|\r\n|id|Numeric group ID|\r\n|is_simplehtml|Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.|\r\n|join_info|Optional field, lists any questions requested when joining and required fields|\r\n|join_mode|Who can join this group and how. One of approval, closed, open|\r\n|lat|Latitude|\r\n|link|Link to group on meetup.com|\r\n|list_addr|Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this|\r\n|list_mode|Optional fields parameter representing the policy for who can post the the group mailing list. One of moderated, off, open, orgs_only|\r\n|lon|Longitude|\r\n|members|Number of Meetup members in this group|\r\n|name|Name of the group|\r\n|next_event|The next upcoming event, if the group has one|\r\n|organizer|Group's primary organizer|\r\n|photos|A small set of photos from the group|\r\n|simple_html_description|Description of the group, in simple HTML format. This value is translated to HTML to update the description.|\r\n|state|State of the group, if in US or Canada|\r\n|timezone|This represents the universal timezone identifier for the group|\r\n|urlname|Urlname used to identify the group on meetup.com|\r\n|visibility|Who can see this group. One of members, public or public_limited|\r\n|who|What the group calls its members|\r\n",
            "schema" : {
              "$ref" : "#/definitions/group"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Associates topics with a given Meetup Group. Limited to organizers of the group.\r\n\r\n#Request Parameters\r\nGroups must have at one topic. Attempts to remove all topics will result in a failed request\r\n",
        "description" : "Associates topics with a given Meetup Group. Limited to orga...",
        "operationId" : "DELETE",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "topic_id",
          "in" : "query",
          "description" : "Comma-delimited list of topic ids to disassociate with group",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response will include a representation of the group topics were removed from\r\n|||\r\n|-|\r\n|category|The primary category of the group, if the group has one|\r\n|city|City of the group|\r\n|country|Country of the group|\r\n|created|Time the group was created in milliseconds since the epoch|\r\n|description|Short description of group|\r\n|ga_code|Optional field return the google analytics code for the group. Only members that can edit group settings can see this|\r\n|group_photo|Group photo|\r\n|id|Numeric group ID|\r\n|is_simplehtml|Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.|\r\n|join_info|Optional field, lists any questions requested when joining and required fields|\r\n|join_mode|Who can join this group and how. One of approval, closed, open|\r\n|lat|Latitude|\r\n|link|Link to group on meetup.com|\r\n|list_addr|Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this|\r\n|list_mode|Optional fields parameter representing the policy for who can post the the group mailing list. One of moderated, off, open, orgs_only|\r\n|lon|Longitude|\r\n|members|Number of Meetup members in this group|\r\n|name|Name of the group|\r\n|next_event|The next upcoming event, if the group has one|\r\n|organizer|Group's primary organizer|\r\n|photos|A small set of photos from the group|\r\n|simple_html_description|Description of the group, in simple HTML format. This value is translated to HTML to update the description.|\r\n|state|State of the group, if in US or Canada|\r\n|timezone|This represents the universal timezone identifier for the group|\r\n|urlname|Urlname used to identify the group on meetup.com|\r\n|visibility|Who can see this group. One of members, public or public_limited|\r\n|who|What the group calls its members|\r\n",
            "schema" : {
              "$ref" : "#/definitions/group"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "urlname",
        "in" : "path",
        "description" : ":urlname is a group name",
        "required" : false,
        "type" : "string"
      } ]
    }
  },
  "definitions" : {
    "everywhereEventSeeds" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "container" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "created" : {
                "type" : "integer"
              },
              "description" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "local_time" : {
                "type" : "integer"
              },
              "short_description" : {
                "type" : "string"
              },
              "status" : {
                "type" : "string"
              },
              "udf_{varname}" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "discussions" : {
      "type" : "object",
      "properties" : {
        "board" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            }
          }
        },
        "body" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "id" : {
          "type" : "integer"
        },
        "last_post" : {
          "type" : "object",
          "properties" : {
            "created" : {
              "type" : "integer"
            },
            "member" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "reply_count" : {
          "type" : "integer"
        },
        "started_by" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            }
          }
        },
        "subject" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "integer"
        }
      }
    },
    "everywhereCommunity" : {
      "type" : "object",
      "properties" : {
        "city" : {
          "type" : "string"
        },
        "container" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            }
          }
        },
        "country" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "id" : {
          "type" : "integer"
        },
        "lat" : {
          "type" : "number"
        },
        "lon" : {
          "type" : "number"
        },
        "meetup_count" : {
          "type" : "integer"
        },
        "meetup_url" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "past_meetup_count" : {
          "type" : "integer"
        },
        "state" : {
          "type" : "integer"
        },
        "udf_{varname}" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "integer"
        },
        "urlname" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        }
      }
    },
    "discussion" : {
      "type" : "object",
      "properties" : {
        "body" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "discussion" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            }
          }
        },
        "id" : {
          "type" : "integer"
        },
        "in_reply_to" : {
          "type" : "integer"
        },
        "member" : {
          "type" : "object",
          "properties" : {
            "city" : {
              "type" : "string"
            },
            "country" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "photo" : {
              "type" : "object",
              "properties" : {
                "thumb" : {
                  "type" : "integer"
                }
              }
            },
            "state" : {
              "type" : "integer"
            }
          }
        },
        "subject" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "integer"
        }
      }
    },
    "photos" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "caption" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "highres_link" : {
                "type" : "string"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "member_photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "photo_album" : {
                "type" : "object",
                "properties" : {
                  "event" : {
                    "type" : "object",
                    "properties" : {
                      "event_url" : {
                        "type" : "string"
                      },
                      "id" : {
                        "type" : "integer"
                      },
                      "name" : {
                        "type" : "string"
                      },
                      "time" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "event_id" : {
                    "type" : "integer"
                  },
                  "group_id" : {
                    "type" : "integer"
                  },
                  "photo_album_id" : {
                    "type" : "integer"
                  }
                }
              },
              "photo_id" : {
                "type" : "integer"
              },
              "photo_link" : {
                "type" : "string"
              },
              "self" : {
                "type" : "object",
                "properties" : {
                  "actions" : {
                    "type" : "string"
                  },
                  "role" : {
                    "type" : "string"
                  }
                }
              },
              "site_link" : {
                "type" : "string"
              },
              "thumb_link" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "everywhereEvent" : {
      "type" : "object",
      "properties" : {
        "address1" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "community" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            }
          }
        },
        "container" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            }
          }
        },
        "country" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "description" : {
          "type" : "string"
        },
        "helpers" : {
          "type" : "object",
          "properties" : {
            "member_city" : {
              "type" : "string"
            },
            "member_country" : {
              "type" : "string"
            },
            "member_id" : {
              "type" : "integer"
            },
            "member_state" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "id" : {
          "type" : "integer"
        },
        "lat" : {
          "type" : "number"
        },
        "lon" : {
          "type" : "number"
        },
        "link" : {
          "type" : "string"
        },
        "meetup_url" : {
          "type" : "string"
        },
        "rsvp_count" : {
          "type" : "integer"
        },
        "short_description" : {
          "type" : "string"
        },
        "state" : {
          "type" : "integer"
        },
        "status" : {
          "type" : "string"
        },
        "time" : {
          "type" : "integer"
        },
        "udf_{varname}" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "integer"
        },
        "venue_name" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        }
      }
    },
    "deprecatedCheckin" : {
      "type" : "object",
      "properties" : {
        "checker" : {
          "type" : "object",
          "properties" : {
            "member_city" : {
              "type" : "string"
            },
            "member_country" : {
              "type" : "string"
            },
            "member_id" : {
              "type" : "integer"
            },
            "member_state" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "checkin_id" : {
          "type" : "integer"
        },
        "comment" : {
          "type" : "string"
        },
        "event_id" : {
          "type" : "integer"
        },
        "group_id" : {
          "type" : "integer"
        },
        "lat" : {
          "type" : "number"
        },
        "lon" : {
          "type" : "number"
        },
        "member_id" : {
          "type" : "integer"
        },
        "member_name" : {
          "type" : "string"
        },
        "time" : {
          "type" : "integer"
        }
      }
    },
    "everywhereCommunities" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "city" : {
                "type" : "string"
              },
              "container" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "country" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "id" : {
                "type" : "integer"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "meetup_count" : {
                "type" : "integer"
              },
              "meetup_url" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "past_meetup_count" : {
                "type" : "integer"
              },
              "state" : {
                "type" : "integer"
              },
              "udf_{varname}" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              },
              "urlname" : {
                "type" : "string"
              },
              "zip" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "members" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "bio" : {
                "type" : "string"
              },
              "birthday" : {
                "type" : "object",
                "properties" : {
                  "day" : {
                    "type" : "string"
                  },
                  "month" : {
                    "type" : "integer"
                  },
                  "year" : {
                    "type" : "string"
                  }
                }
              },
              "country" : {
                "type" : "string"
              },
              "city" : {
                "type" : "string"
              },
              "state" : {
                "type" : "integer"
              },
              "email" : {
                "type" : "integer"
              },
              "gender" : {
                "type" : "string"
              },
              "hometown" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "joined" : {
                "type" : "integer"
              },
              "lang" : {
                "type" : "string"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "link" : {
                "type" : "string"
              },
              "membership_count" : {
                "type" : "integer"
              },
              "messagable" : {
                "type" : "string"
              },
              "messaging_pref" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "other_services" : {
                "type" : "object",
                "properties" : {
                  "[service-name]" : {
                    "type" : "object",
                    "properties" : {
                      "identifier" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              },
              "photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "photo_url" : {
                "type" : "string"
              },
              "photos" : {
                "type" : "string"
              },
              "privacy" : {
                "type" : "object",
                "properties" : {
                  "bio" : {
                    "type" : "string"
                  },
                  "facebook" : {
                    "type" : "string"
                  },
                  "groups" : {
                    "type" : "string"
                  },
                  "photos" : {
                    "type" : "string"
                  },
                  "topics" : {
                    "type" : "string"
                  }
                }
              },
              "reachable" : {
                "type" : "string"
              },
              "self" : {
                "type" : "object",
                "properties" : {
                  "common" : {
                    "type" : "object",
                    "properties" : {
                      "friends" : {
                        "type" : "string"
                      },
                      "groups" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              },
              "topics" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlkey" : {
                    "type" : "string"
                  }
                }
              },
              "visited" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "dashboard" : {
      "type" : "object",
      "properties" : {
        "last_event" : {
          "type" : "object",
          "properties" : {
            "announced" : {
              "type" : "string"
            },
            "comment_count" : {
              "type" : "integer"
            },
            "created" : {
              "type" : "integer"
            },
            "description" : {
              "type" : "string"
            },
            "distance" : {
              "type" : "number"
            },
            "duration" : {
              "type" : "integer"
            },
            "email_reminders" : {
              "type" : "string"
            },
            "event_hosts" : {
              "type" : "object",
              "properties" : {
                "member_id" : {
                  "type" : "integer"
                },
                "member_name" : {
                  "type" : "string"
                }
              }
            },
            "event_url" : {
              "type" : "string"
            },
            "featured" : {
              "type" : "string"
            },
            "fee" : {
              "type" : "object",
              "properties" : {
                "accepts" : {
                  "type" : "string"
                },
                "amount" : {
                  "type" : "string"
                },
                "currency" : {
                  "type" : "string"
                },
                "description" : {
                  "type" : "string"
                },
                "label" : {
                  "type" : "integer"
                }
              }
            },
            "group" : {
              "type" : "object",
              "properties" : {
                "category" : {
                  "type" : "string"
                },
                "group_lat" : {
                  "type" : "string"
                },
                "group_lon" : {
                  "type" : "string"
                },
                "group_photo" : {
                  "type" : "string"
                },
                "id" : {
                  "type" : "integer"
                },
                "join_mode" : {
                  "type" : "string"
                },
                "membership_dues" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "topics" : {
                  "type" : "string"
                },
                "urlname" : {
                  "type" : "string"
                },
                "who" : {
                  "type" : "string"
                }
              }
            },
            "headcount" : {
              "type" : "string"
            },
            "how_to_find_us" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "is_simplehtml" : {
              "type" : "string"
            },
            "maybe_rsvp_count" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "photo_album_id" : {
              "type" : "integer"
            },
            "photo_count" : {
              "type" : "integer"
            },
            "photo_url" : {
              "type" : "string"
            },
            "publish_status" : {
              "type" : "string"
            },
            "rating" : {
              "type" : "object",
              "properties" : {
                "average" : {
                  "type" : "string"
                },
                "count" : {
                  "type" : "integer"
                }
              }
            },
            "rsvp_alerts" : {
              "type" : "string"
            },
            "rsvp_limit" : {
              "type" : "string"
            },
            "rsvp_rules" : {
              "type" : "object",
              "properties" : {
                "close_time" : {
                  "type" : "string"
                },
                "closed" : {
                  "type" : "string"
                },
                "guest_limit" : {
                  "type" : "string"
                },
                "open_time" : {
                  "type" : "string"
                },
                "refund_policy" : {
                  "type" : "string"
                },
                "waitlisting" : {
                  "type" : "string"
                }
              }
            },
            "rsvpable" : {
              "type" : "string"
            },
            "self" : {
              "type" : "object",
              "properties" : {
                "actions" : {
                  "type" : "string"
                },
                "checked_in" : {
                  "type" : "string"
                },
                "pay_status" : {
                  "type" : "string"
                },
                "rated" : {
                  "type" : "integer"
                },
                "role" : {
                  "type" : "string"
                },
                "rsvp" : {
                  "type" : "string"
                },
                "watching" : {
                  "type" : "string"
                }
              }
            },
            "short_link" : {
              "type" : "string"
            },
            "simple_html_description" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string"
            },
            "survey_questions" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                },
                "question" : {
                  "type" : "string"
                }
              }
            },
            "time" : {
              "type" : "integer"
            },
            "timezone" : {
              "type" : "string"
            },
            "trending_rank" : {
              "type" : "string"
            },
            "updated" : {
              "type" : "integer"
            },
            "utc_offset" : {
              "type" : "integer"
            },
            "venue" : {
              "type" : "object",
              "properties" : {
                "address_1" : {
                  "type" : "string"
                },
                "address_2" : {
                  "type" : "string"
                },
                "address_3" : {
                  "type" : "string"
                },
                "city" : {
                  "type" : "string"
                },
                "state" : {
                  "type" : "integer"
                },
                "country" : {
                  "type" : "string"
                },
                "id" : {
                  "type" : "integer"
                },
                "lat" : {
                  "type" : "number"
                },
                "lon" : {
                  "type" : "number"
                },
                "name" : {
                  "type" : "string"
                },
                "phone" : {
                  "type" : "integer"
                },
                "repinned" : {
                  "type" : "string"
                },
                "zip" : {
                  "type" : "string"
                }
              }
            },
            "venue_visibility" : {
              "type" : "string"
            },
            "visibility" : {
              "type" : "string"
            },
            "why" : {
              "type" : "string"
            },
            "yes_rsvp_count" : {
              "type" : "integer"
            }
          }
        },
        "next_event" : {
          "type" : "object",
          "properties" : {
            "announced" : {
              "type" : "string"
            },
            "comment_count" : {
              "type" : "integer"
            },
            "created" : {
              "type" : "integer"
            },
            "description" : {
              "type" : "string"
            },
            "distance" : {
              "type" : "number"
            },
            "duration" : {
              "type" : "integer"
            },
            "email_reminders" : {
              "type" : "string"
            },
            "event_hosts" : {
              "type" : "object",
              "properties" : {
                "member_id" : {
                  "type" : "integer"
                },
                "member_name" : {
                  "type" : "string"
                }
              }
            },
            "event_url" : {
              "type" : "string"
            },
            "featured" : {
              "type" : "string"
            },
            "fee" : {
              "type" : "object",
              "properties" : {
                "accepts" : {
                  "type" : "string"
                },
                "amount" : {
                  "type" : "string"
                },
                "currency" : {
                  "type" : "string"
                },
                "description" : {
                  "type" : "string"
                },
                "label" : {
                  "type" : "integer"
                }
              }
            },
            "group" : {
              "type" : "object",
              "properties" : {
                "category" : {
                  "type" : "string"
                },
                "group_lat" : {
                  "type" : "string"
                },
                "group_lon" : {
                  "type" : "string"
                },
                "group_photo" : {
                  "type" : "string"
                },
                "id" : {
                  "type" : "integer"
                },
                "join_mode" : {
                  "type" : "string"
                },
                "membership_dues" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "topics" : {
                  "type" : "string"
                },
                "urlname" : {
                  "type" : "string"
                },
                "who" : {
                  "type" : "string"
                }
              }
            },
            "headcount" : {
              "type" : "string"
            },
            "how_to_find_us" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "is_simplehtml" : {
              "type" : "string"
            },
            "maybe_rsvp_count" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "photo_album_id" : {
              "type" : "integer"
            },
            "photo_count" : {
              "type" : "integer"
            },
            "photo_url" : {
              "type" : "string"
            },
            "publish_status" : {
              "type" : "string"
            },
            "rating" : {
              "type" : "object",
              "properties" : {
                "average" : {
                  "type" : "string"
                },
                "count" : {
                  "type" : "integer"
                }
              }
            },
            "rsvp_alerts" : {
              "type" : "string"
            },
            "rsvp_limit" : {
              "type" : "string"
            },
            "rsvp_rules" : {
              "type" : "object",
              "properties" : {
                "close_time" : {
                  "type" : "string"
                },
                "closed" : {
                  "type" : "string"
                },
                "guest_limit" : {
                  "type" : "string"
                },
                "open_time" : {
                  "type" : "string"
                },
                "refund_policy" : {
                  "type" : "string"
                },
                "waitlisting" : {
                  "type" : "string"
                }
              }
            },
            "rsvpable" : {
              "type" : "string"
            },
            "self" : {
              "type" : "object",
              "properties" : {
                "actions" : {
                  "type" : "string"
                },
                "checked_in" : {
                  "type" : "string"
                },
                "pay_status" : {
                  "type" : "string"
                },
                "rated" : {
                  "type" : "integer"
                },
                "role" : {
                  "type" : "string"
                },
                "rsvp" : {
                  "type" : "string"
                },
                "watching" : {
                  "type" : "string"
                }
              }
            },
            "short_link" : {
              "type" : "string"
            },
            "simple_html_description" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string"
            },
            "survey_questions" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                },
                "question" : {
                  "type" : "string"
                }
              }
            },
            "time" : {
              "type" : "integer"
            },
            "timezone" : {
              "type" : "string"
            },
            "trending_rank" : {
              "type" : "string"
            },
            "updated" : {
              "type" : "integer"
            },
            "utc_offset" : {
              "type" : "integer"
            },
            "venue" : {
              "type" : "object",
              "properties" : {
                "address_1" : {
                  "type" : "string"
                },
                "address_2" : {
                  "type" : "string"
                },
                "address_3" : {
                  "type" : "string"
                },
                "city" : {
                  "type" : "string"
                },
                "state" : {
                  "type" : "integer"
                },
                "country" : {
                  "type" : "string"
                },
                "id" : {
                  "type" : "integer"
                },
                "lat" : {
                  "type" : "number"
                },
                "lon" : {
                  "type" : "number"
                },
                "name" : {
                  "type" : "string"
                },
                "phone" : {
                  "type" : "integer"
                },
                "repinned" : {
                  "type" : "string"
                },
                "zip" : {
                  "type" : "string"
                }
              }
            },
            "venue_visibility" : {
              "type" : "string"
            },
            "visibility" : {
              "type" : "string"
            },
            "why" : {
              "type" : "string"
            },
            "yes_rsvp_count" : {
              "type" : "integer"
            }
          }
        },
        "ongoing_event" : {
          "type" : "object",
          "properties" : {
            "announced" : {
              "type" : "string"
            },
            "comment_count" : {
              "type" : "integer"
            },
            "created" : {
              "type" : "integer"
            },
            "description" : {
              "type" : "string"
            },
            "distance" : {
              "type" : "number"
            },
            "duration" : {
              "type" : "integer"
            },
            "email_reminders" : {
              "type" : "string"
            },
            "event_hosts" : {
              "type" : "object",
              "properties" : {
                "member_id" : {
                  "type" : "integer"
                },
                "member_name" : {
                  "type" : "string"
                }
              }
            },
            "event_url" : {
              "type" : "string"
            },
            "featured" : {
              "type" : "string"
            },
            "fee" : {
              "type" : "object",
              "properties" : {
                "accepts" : {
                  "type" : "string"
                },
                "amount" : {
                  "type" : "string"
                },
                "currency" : {
                  "type" : "string"
                },
                "description" : {
                  "type" : "string"
                },
                "label" : {
                  "type" : "integer"
                }
              }
            },
            "group" : {
              "type" : "object",
              "properties" : {
                "category" : {
                  "type" : "string"
                },
                "group_lat" : {
                  "type" : "string"
                },
                "group_lon" : {
                  "type" : "string"
                },
                "group_photo" : {
                  "type" : "string"
                },
                "id" : {
                  "type" : "integer"
                },
                "join_mode" : {
                  "type" : "string"
                },
                "membership_dues" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "topics" : {
                  "type" : "string"
                },
                "urlname" : {
                  "type" : "string"
                },
                "who" : {
                  "type" : "string"
                }
              }
            },
            "headcount" : {
              "type" : "string"
            },
            "how_to_find_us" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "is_simplehtml" : {
              "type" : "string"
            },
            "maybe_rsvp_count" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "photo_album_id" : {
              "type" : "integer"
            },
            "photo_count" : {
              "type" : "integer"
            },
            "photo_url" : {
              "type" : "string"
            },
            "publish_status" : {
              "type" : "string"
            },
            "rating" : {
              "type" : "object",
              "properties" : {
                "average" : {
                  "type" : "string"
                },
                "count" : {
                  "type" : "integer"
                }
              }
            },
            "rsvp_alerts" : {
              "type" : "string"
            },
            "rsvp_limit" : {
              "type" : "string"
            },
            "rsvp_rules" : {
              "type" : "object",
              "properties" : {
                "close_time" : {
                  "type" : "string"
                },
                "closed" : {
                  "type" : "string"
                },
                "guest_limit" : {
                  "type" : "string"
                },
                "open_time" : {
                  "type" : "string"
                },
                "refund_policy" : {
                  "type" : "string"
                },
                "waitlisting" : {
                  "type" : "string"
                }
              }
            },
            "rsvpable" : {
              "type" : "string"
            },
            "self" : {
              "type" : "object",
              "properties" : {
                "actions" : {
                  "type" : "string"
                },
                "checked_in" : {
                  "type" : "string"
                },
                "pay_status" : {
                  "type" : "string"
                },
                "rated" : {
                  "type" : "integer"
                },
                "role" : {
                  "type" : "string"
                },
                "rsvp" : {
                  "type" : "string"
                },
                "watching" : {
                  "type" : "string"
                }
              }
            },
            "short_link" : {
              "type" : "string"
            },
            "simple_html_description" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string"
            },
            "survey_questions" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                },
                "question" : {
                  "type" : "string"
                }
              }
            },
            "time" : {
              "type" : "integer"
            },
            "timezone" : {
              "type" : "string"
            },
            "trending_rank" : {
              "type" : "string"
            },
            "updated" : {
              "type" : "integer"
            },
            "utc_offset" : {
              "type" : "integer"
            },
            "venue" : {
              "type" : "object",
              "properties" : {
                "address_1" : {
                  "type" : "string"
                },
                "address_2" : {
                  "type" : "string"
                },
                "address_3" : {
                  "type" : "string"
                },
                "city" : {
                  "type" : "string"
                },
                "state" : {
                  "type" : "integer"
                },
                "country" : {
                  "type" : "string"
                },
                "id" : {
                  "type" : "integer"
                },
                "lat" : {
                  "type" : "number"
                },
                "lon" : {
                  "type" : "number"
                },
                "name" : {
                  "type" : "string"
                },
                "phone" : {
                  "type" : "integer"
                },
                "repinned" : {
                  "type" : "string"
                },
                "zip" : {
                  "type" : "string"
                }
              }
            },
            "venue_visibility" : {
              "type" : "string"
            },
            "visibility" : {
              "type" : "string"
            },
            "why" : {
              "type" : "string"
            },
            "yes_rsvp_count" : {
              "type" : "integer"
            }
          }
        },
        "stats" : {
          "type" : "object",
          "properties" : {
            "city_top_groups" : {
              "type" : "string"
            },
            "fb_friend_events" : {
              "type" : "string"
            },
            "global_top_groups" : {
              "type" : "string"
            },
            "memberships" : {
              "type" : "string"
            },
            "nearby_events" : {
              "type" : "string"
            },
            "upcoming_events" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "events" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "announced" : {
                "type" : "string"
              },
              "comment_count" : {
                "type" : "integer"
              },
              "created" : {
                "type" : "integer"
              },
              "description" : {
                "type" : "string"
              },
              "distance" : {
                "type" : "number"
              },
              "duration" : {
                "type" : "integer"
              },
              "email_reminders" : {
                "type" : "string"
              },
              "event_hosts" : {
                "type" : "object",
                "properties" : {
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_name" : {
                    "type" : "string"
                  }
                }
              },
              "event_url" : {
                "type" : "string"
              },
              "featured" : {
                "type" : "string"
              },
              "fee" : {
                "type" : "object",
                "properties" : {
                  "accepts" : {
                    "type" : "string"
                  },
                  "amount" : {
                    "type" : "string"
                  },
                  "currency" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "label" : {
                    "type" : "integer"
                  }
                }
              },
              "group" : {
                "type" : "object",
                "properties" : {
                  "category" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "integer"
                      },
                      "name" : {
                        "type" : "string"
                      },
                      "shortname" : {
                        "type" : "string"
                      }
                    }
                  },
                  "group_lat" : {
                    "type" : "string"
                  },
                  "group_lon" : {
                    "type" : "string"
                  },
                  "group_photo" : {
                    "type" : "object",
                    "properties" : {
                      "highres_link" : {
                        "type" : "string"
                      },
                      "photo_id" : {
                        "type" : "integer"
                      },
                      "photo_link" : {
                        "type" : "string"
                      },
                      "thumb_link" : {
                        "type" : "string"
                      }
                    }
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "join_mode" : {
                    "type" : "string"
                  },
                  "membership_dues" : {
                    "type" : "object",
                    "properties" : {
                      "currency" : {
                        "type" : "string"
                      },
                      "fee" : {
                        "type" : "string"
                      },
                      "fee_desc" : {
                        "type" : "string"
                      },
                      "methods" : {
                        "type" : "string"
                      },
                      "refund_policy" : {
                        "type" : "string"
                      }
                    }
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "topics" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "integer"
                      },
                      "name" : {
                        "type" : "string"
                      },
                      "urlkey" : {
                        "type" : "string"
                      }
                    }
                  },
                  "urlname" : {
                    "type" : "string"
                  },
                  "who" : {
                    "type" : "string"
                  }
                }
              },
              "headcount" : {
                "type" : "string"
              },
              "how_to_find_us" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "is_simplehtml" : {
                "type" : "string"
              },
              "maybe_rsvp_count" : {
                "type" : "integer"
              },
              "name" : {
                "type" : "string"
              },
              "photo_album_id" : {
                "type" : "integer"
              },
              "photo_count" : {
                "type" : "integer"
              },
              "photo_url" : {
                "type" : "string"
              },
              "publish_status" : {
                "type" : "string"
              },
              "rating" : {
                "type" : "object",
                "properties" : {
                  "average" : {
                    "type" : "string"
                  },
                  "count" : {
                    "type" : "integer"
                  }
                }
              },
              "rsvp_alerts" : {
                "type" : "string"
              },
              "rsvp_limit" : {
                "type" : "string"
              },
              "rsvp_rules" : {
                "type" : "object",
                "properties" : {
                  "close_time" : {
                    "type" : "string"
                  },
                  "closed" : {
                    "type" : "string"
                  },
                  "guest_limit" : {
                    "type" : "string"
                  },
                  "open_time" : {
                    "type" : "string"
                  },
                  "refund_policy" : {
                    "type" : "object",
                    "properties" : {
                      "days" : {
                        "type" : "string"
                      },
                      "notes" : {
                        "type" : "integer"
                      },
                      "policies" : {
                        "type" : "string"
                      }
                    }
                  },
                  "waitlisting" : {
                    "type" : "string"
                  }
                }
              },
              "rsvpable" : {
                "type" : "string"
              },
              "self" : {
                "type" : "object",
                "properties" : {
                  "actions" : {
                    "type" : "string"
                  },
                  "checked_in" : {
                    "type" : "string"
                  },
                  "pay_status" : {
                    "type" : "string"
                  },
                  "rated" : {
                    "type" : "integer"
                  },
                  "role" : {
                    "type" : "string"
                  },
                  "rsvp" : {
                    "type" : "object",
                    "properties" : {
                      "answers" : {
                        "type" : "string"
                      },
                      "guests" : {
                        "type" : "string"
                      },
                      "response" : {
                        "type" : "string"
                      }
                    }
                  },
                  "watching" : {
                    "type" : "string"
                  }
                }
              },
              "short_link" : {
                "type" : "string"
              },
              "simple_html_description" : {
                "type" : "string"
              },
              "status" : {
                "type" : "string"
              },
              "survey_questions" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "question" : {
                    "type" : "string"
                  }
                }
              },
              "time" : {
                "type" : "integer"
              },
              "timezone" : {
                "type" : "string"
              },
              "trending_rank" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              },
              "utc_offset" : {
                "type" : "integer"
              },
              "venue" : {
                "type" : "object",
                "properties" : {
                  "address_1" : {
                    "type" : "string"
                  },
                  "address_2" : {
                    "type" : "string"
                  },
                  "address_3" : {
                    "type" : "string"
                  },
                  "city" : {
                    "type" : "string"
                  },
                  "state" : {
                    "type" : "integer"
                  },
                  "country" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "lat" : {
                    "type" : "number"
                  },
                  "lon" : {
                    "type" : "number"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "phone" : {
                    "type" : "integer"
                  },
                  "repinned" : {
                    "type" : "string"
                  },
                  "zip" : {
                    "type" : "string"
                  }
                }
              },
              "venue_visibility" : {
                "type" : "string"
              },
              "visibility" : {
                "type" : "string"
              },
              "why" : {
                "type" : "string"
              },
              "yes_rsvp_count" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "group" : {
      "type" : "object",
      "properties" : {
        "category" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "shortname" : {
              "type" : "string"
            }
          }
        },
        "city" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "description" : {
          "type" : "string"
        },
        "ga_code" : {
          "type" : "string"
        },
        "group_photo" : {
          "type" : "object",
          "properties" : {
            "highres_link" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "id" : {
          "type" : "integer"
        },
        "is_simplehtml" : {
          "type" : "string"
        },
        "join_info" : {
          "type" : "object",
          "properties" : {
            "intro_required" : {
              "type" : "string"
            },
            "photo_required" : {
              "type" : "string"
            },
            "questions" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                },
                "question" : {
                  "type" : "string"
                }
              }
            },
            "questions_req" : {
              "type" : "string"
            }
          }
        },
        "join_mode" : {
          "type" : "string"
        },
        "lat" : {
          "type" : "number"
        },
        "link" : {
          "type" : "string"
        },
        "list_addr" : {
          "type" : "string"
        },
        "list_mode" : {
          "type" : "string"
        },
        "lon" : {
          "type" : "number"
        },
        "members" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "next_event" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "time" : {
              "type" : "integer"
            }
          }
        },
        "organizer" : {
          "type" : "object",
          "properties" : {
            "bio" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "photos" : {
          "type" : "object",
          "properties" : {
            "highres_link" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "simple_html_description" : {
          "type" : "string"
        },
        "state" : {
          "type" : "integer"
        },
        "timezone" : {
          "type" : "string"
        },
        "urlname" : {
          "type" : "string"
        },
        "visibility" : {
          "type" : "string"
        },
        "who" : {
          "type" : "string"
        }
      }
    },
    "cities" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "city" : {
                "type" : "string"
              },
              "country" : {
                "type" : "string"
              },
              "distance" : {
                "type" : "number"
              },
              "id" : {
                "type" : "integer"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "member_count" : {
                "type" : "integer"
              },
              "name_string" : {
                "type" : "string"
              },
              "ranking" : {
                "type" : "string"
              },
              "state" : {
                "type" : "integer"
              },
              "zip" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "everywhereComments" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "comment" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "event_id" : {
                "type" : "integer"
              },
              "id" : {
                "type" : "integer"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "parent_id" : {
                "type" : "integer"
              },
              "udf_{varname}" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "profile" : {
      "type" : "object",
      "properties" : {
        "additional" : {
          "type" : "string"
        },
        "answers" : {
          "type" : "object",
          "properties" : {
            "answer" : {
              "type" : "string"
            },
            "question" : {
              "type" : "string"
            },
            "question_id" : {
              "type" : "integer"
            }
          }
        },
        "attendance_count" : {
          "type" : "integer"
        },
        "bio" : {
          "type" : "string"
        },
        "comment" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "updated" : {
          "type" : "integer"
        },
        "group" : {
          "type" : "object",
          "properties" : {
            "group_lat" : {
              "type" : "string"
            },
            "group_lon" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "join_mode" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            },
            "who" : {
              "type" : "string"
            }
          }
        },
        "member_city" : {
          "type" : "string"
        },
        "member_country" : {
          "type" : "string"
        },
        "member_id" : {
          "type" : "integer"
        },
        "member_state" : {
          "type" : "string"
        },
        "membership_dues" : {
          "type" : "object",
          "properties" : {
            "period_status" : {
              "type" : "string"
            },
            "total_amount" : {
              "type" : "string"
            },
            "transaction_time" : {
              "type" : "integer"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "other_services" : {
          "type" : "object",
          "properties" : {
            "[service-name]" : {
              "type" : "object",
              "properties" : {
                "identifier" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "photo" : {
          "type" : "object",
          "properties" : {
            "highres_link" : {
              "type" : "string"
            },
            "photo_id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "photo_url" : {
          "type" : "string"
        },
        "profile_url" : {
          "type" : "string"
        },
        "role" : {
          "type" : "string"
        },
        "site_url" : {
          "type" : "string"
        },
        "site_name" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "title" : {
          "type" : "integer"
        },
        "visited" : {
          "type" : "integer"
        }
      }
    },
    "profiles" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "additional" : {
                "type" : "string"
              },
              "answers" : {
                "type" : "object",
                "properties" : {
                  "answer" : {
                    "type" : "string"
                  },
                  "question" : {
                    "type" : "string"
                  },
                  "question_id" : {
                    "type" : "integer"
                  }
                }
              },
              "attendance_count" : {
                "type" : "integer"
              },
              "bio" : {
                "type" : "string"
              },
              "comment" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "updated" : {
                "type" : "integer"
              },
              "group" : {
                "type" : "object",
                "properties" : {
                  "group_lat" : {
                    "type" : "string"
                  },
                  "group_lon" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "join_mode" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  },
                  "who" : {
                    "type" : "string"
                  }
                }
              },
              "member_city" : {
                "type" : "string"
              },
              "member_country" : {
                "type" : "string"
              },
              "member_id" : {
                "type" : "integer"
              },
              "member_state" : {
                "type" : "string"
              },
              "membership_dues" : {
                "type" : "object",
                "properties" : {
                  "period_status" : {
                    "type" : "string"
                  },
                  "total_amount" : {
                    "type" : "string"
                  },
                  "transaction_time" : {
                    "type" : "integer"
                  }
                }
              },
              "name" : {
                "type" : "string"
              },
              "other_services" : {
                "type" : "object",
                "properties" : {
                  "[service-name]" : {
                    "type" : "object",
                    "properties" : {
                      "identifier" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              },
              "photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "photo_url" : {
                "type" : "string"
              },
              "profile_url" : {
                "type" : "string"
              },
              "role" : {
                "type" : "string"
              },
              "site_url" : {
                "type" : "string"
              },
              "site_name" : {
                "type" : "string"
              },
              "status" : {
                "type" : "string"
              },
              "title" : {
                "type" : "integer"
              },
              "visited" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "batch" : {
      "properties" : {
        "body" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "headers" : {
          "type" : "object",
          "properties" : { }
        },
        "path" : {
          "type" : "string"
        },
        "ref" : {
          "type" : "string"
        },
        "status" : {
          "type" : "integer"
        }
      }
    },
    "groupPhotoUploadResult" : {
      "type" : "object",
      "properties" : {
        "group_photo_id" : {
          "type" : "integer"
        },
        "photo_url" : {
          "type" : "string"
        },
        "title" : {
          "type" : "integer"
        }
      }
    },
    "eventComment" : {
      "type" : "object",
      "properties" : {
        "comment" : {
          "type" : "string"
        },
        "comment_url" : {
          "type" : "string"
        },
        "event" : {
          "type" : "object",
          "properties" : {
            "event_url" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "time" : {
              "type" : "integer"
            }
          }
        },
        "event_comment_id" : {
          "type" : "integer"
        },
        "event_diff_id" : {
          "type" : "integer"
        },
        "event_id" : {
          "type" : "integer"
        },
        "group_id" : {
          "type" : "integer"
        },
        "in_reply_to" : {
          "type" : "integer"
        },
        "like_count" : {
          "type" : "integer"
        },
        "member_id" : {
          "type" : "integer"
        },
        "member_name" : {
          "type" : "string"
        },
        "member_photo" : {
          "type" : "object",
          "properties" : {
            "hires_link" : {
              "type" : "string"
            },
            "photo_id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "notifications" : {
          "type" : "string"
        },
        "replies" : {
          "type" : "string"
        },
        "self" : {
          "type" : "object",
          "properties" : {
            "actions" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "everywhereFollowers" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "community" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "container" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "created" : {
                "type" : "integer"
              },
              "id" : {
                "type" : "integer"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "status" : {
                "type" : "string"
              },
              "udf_{varname}" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "photoComment" : {
      "type" : "object",
      "properties" : {
        "comment" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "member" : {
          "type" : "object",
          "properties" : {
            "member_city" : {
              "type" : "string"
            },
            "member_country" : {
              "type" : "string"
            },
            "member_id" : {
              "type" : "integer"
            },
            "member_state" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "member_photo" : {
          "type" : "object",
          "properties" : {
            "hires_link" : {
              "type" : "string"
            },
            "photo_id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "photo_comment_id" : {
          "type" : "integer"
        },
        "photo_id" : {
          "type" : "integer"
        }
      }
    },
    "feed" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "group_id" : {
                "type" : "integer"
              },
              "group_name" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "item_type" : {
                "type" : "string"
              },
              "link" : {
                "type" : "string"
              },
              "member_id" : {
                "type" : "integer"
              },
              "member_name" : {
                "type" : "string"
              },
              "photo_url" : {
                "type" : "string"
              },
              "published" : {
                "type" : "string"
              },
              "title" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "eventRatings" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "event_id" : {
                "type" : "integer"
              },
              "group_id" : {
                "type" : "integer"
              },
              "member_id" : {
                "type" : "integer"
              },
              "member_name" : {
                "type" : "string"
              },
              "rating" : {
                "type" : "string"
              },
              "time" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "photoAlbums" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "album_photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "created" : {
                "type" : "integer"
              },
              "event_id" : {
                "type" : "integer"
              },
              "group_id" : {
                "type" : "integer"
              },
              "ordering" : {
                "type" : "integer"
              },
              "photo_album_id" : {
                "type" : "integer"
              },
              "photo_count" : {
                "type" : "integer"
              },
              "title" : {
                "type" : "integer"
              },
              "updated" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "memberPhotoUploadResult" : {
      "type" : "object",
      "properties" : {
        "member_photo_id" : {
          "type" : "integer"
        },
        "photo_url" : {
          "type" : "string"
        },
        "title" : {
          "type" : "integer"
        }
      }
    },
    "payments" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "confirm_code" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "groupVenues" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "address_1" : {
                "type" : "string"
              },
              "address_2" : {
                "type" : "string"
              },
              "address_3" : {
                "type" : "string"
              },
              "city" : {
                "type" : "string"
              },
              "country" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "name" : {
                "type" : "string"
              },
              "phone" : {
                "type" : "integer"
              },
              "state" : {
                "type" : "integer"
              },
              "visibility" : {
                "type" : "string"
              },
              "zip" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "everywhereEvents" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "address1" : {
                "type" : "string"
              },
              "city" : {
                "type" : "string"
              },
              "community" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "container" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "country" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "description" : {
                "type" : "string"
              },
              "helpers" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "id" : {
                "type" : "integer"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "link" : {
                "type" : "string"
              },
              "meetup_url" : {
                "type" : "string"
              },
              "rsvp_count" : {
                "type" : "integer"
              },
              "short_description" : {
                "type" : "string"
              },
              "state" : {
                "type" : "integer"
              },
              "status" : {
                "type" : "string"
              },
              "time" : {
                "type" : "integer"
              },
              "udf_{varname}" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              },
              "venue_name" : {
                "type" : "string"
              },
              "zip" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "boards" : {
      "type" : "object",
      "properties" : {
        "0" : {
          "type" : "object",
          "properties" : {
            "created" : {
              "type" : "integer"
            },
            "discussion_count" : {
              "type" : "integer"
            },
            "group" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                }
              }
            },
            "id" : {
              "type" : "integer"
            },
            "latest_reply" : {
              "type" : "object",
              "properties" : {
                "created" : {
                  "type" : "integer"
                },
                "member" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    }
                  }
                }
              }
            },
            "name" : {
              "type" : "string"
            },
            "post_count" : {
              "type" : "integer"
            },
            "updated" : {
              "type" : "integer"
            }
          }
        }
      }
    },
    "photoAlbum" : {
      "type" : "object",
      "properties" : {
        "album_photo" : {
          "type" : "object",
          "properties" : {
            "highres_link" : {
              "type" : "string"
            },
            "photo_id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "created" : {
          "type" : "integer"
        },
        "event_id" : {
          "type" : "integer"
        },
        "group_id" : {
          "type" : "integer"
        },
        "ordering" : {
          "type" : "integer"
        },
        "photo_album_id" : {
          "type" : "integer"
        },
        "photo_count" : {
          "type" : "integer"
        },
        "title" : {
          "type" : "integer"
        },
        "updated" : {
          "type" : "integer"
        }
      }
    },
    "photoComments" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "comment" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "member_photo" : {
                "type" : "object",
                "properties" : {
                  "hires_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "photo_comment_id" : {
                "type" : "integer"
              },
              "photo_id" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "watching" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string"
        }
      }
    },
    "notWatching" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string"
        }
      }
    },
    "member" : {
      "type" : "object",
      "properties" : {
        "bio" : {
          "type" : "string"
        },
        "birthday" : {
          "type" : "object",
          "properties" : {
            "day" : {
              "type" : "string"
            },
            "month" : {
              "type" : "integer"
            },
            "year" : {
              "type" : "string"
            }
          }
        },
        "country" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "state" : {
          "type" : "integer"
        },
        "email" : {
          "type" : "integer"
        },
        "gender" : {
          "type" : "string"
        },
        "hometown" : {
          "type" : "string"
        },
        "id" : {
          "type" : "integer"
        },
        "joined" : {
          "type" : "integer"
        },
        "lang" : {
          "type" : "string"
        },
        "lat" : {
          "type" : "number"
        },
        "lon" : {
          "type" : "number"
        },
        "link" : {
          "type" : "string"
        },
        "membership_count" : {
          "type" : "integer"
        },
        "messagable" : {
          "type" : "string"
        },
        "messaging_pref" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "other_services" : {
          "type" : "object",
          "properties" : {
            "[service-name]" : {
              "type" : "object",
              "properties" : {
                "identifier" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "photo" : {
          "type" : "object",
          "properties" : {
            "highres_link" : {
              "type" : "string"
            },
            "photo_id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "photo_url" : {
          "type" : "string"
        },
        "photos" : {
          "type" : "string"
        },
        "privacy" : {
          "type" : "object",
          "properties" : {
            "bio" : {
              "type" : "string"
            },
            "facebook" : {
              "type" : "string"
            },
            "groups" : {
              "type" : "string"
            },
            "photos" : {
              "type" : "string"
            },
            "topics" : {
              "type" : "string"
            }
          }
        },
        "reachable" : {
          "type" : "string"
        },
        "self" : {
          "type" : "object",
          "properties" : {
            "common" : {
              "type" : "object",
              "properties" : {
                "friends" : {
                  "type" : "string"
                },
                "groups" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "topics" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlkey" : {
              "type" : "string"
            }
          }
        },
        "visited" : {
          "type" : "integer"
        }
      }
    },
    "everywhereFollows" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "community" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "container" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlname" : {
                    "type" : "string"
                  }
                }
              },
              "created" : {
                "type" : "integer"
              },
              "id" : {
                "type" : "integer"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "status" : {
                "type" : "string"
              },
              "udf_{varname}" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "categories" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "integer"
              },
              "name" : {
                "type" : "string"
              },
              "shortname" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "everywhereRsvps" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "created" : {
                "type" : "integer"
              },
              "event_id" : {
                "type" : "integer"
              },
              "id" : {
                "type" : "integer"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "member_photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "udf_{varname}" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "concierge" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "announced" : {
                "type" : "string"
              },
              "comment_count" : {
                "type" : "integer"
              },
              "created" : {
                "type" : "integer"
              },
              "description" : {
                "type" : "string"
              },
              "distance" : {
                "type" : "number"
              },
              "duration" : {
                "type" : "integer"
              },
              "email_reminders" : {
                "type" : "string"
              },
              "event_hosts" : {
                "type" : "object",
                "properties" : {
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_name" : {
                    "type" : "string"
                  }
                }
              },
              "event_url" : {
                "type" : "string"
              },
              "featured" : {
                "type" : "string"
              },
              "fee" : {
                "type" : "object",
                "properties" : {
                  "accepts" : {
                    "type" : "string"
                  },
                  "amount" : {
                    "type" : "string"
                  },
                  "currency" : {
                    "type" : "string"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "label" : {
                    "type" : "integer"
                  }
                }
              },
              "group" : {
                "type" : "object",
                "properties" : {
                  "category" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "integer"
                      },
                      "name" : {
                        "type" : "string"
                      },
                      "shortname" : {
                        "type" : "string"
                      }
                    }
                  },
                  "group_lat" : {
                    "type" : "string"
                  },
                  "group_lon" : {
                    "type" : "string"
                  },
                  "group_photo" : {
                    "type" : "object",
                    "properties" : {
                      "highres_link" : {
                        "type" : "string"
                      },
                      "photo_id" : {
                        "type" : "integer"
                      },
                      "photo_link" : {
                        "type" : "string"
                      },
                      "thumb_link" : {
                        "type" : "string"
                      }
                    }
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "join_mode" : {
                    "type" : "string"
                  },
                  "membership_dues" : {
                    "type" : "object",
                    "properties" : {
                      "currency" : {
                        "type" : "string"
                      },
                      "fee" : {
                        "type" : "string"
                      },
                      "fee_desc" : {
                        "type" : "string"
                      },
                      "methods" : {
                        "type" : "string"
                      },
                      "refund_policy" : {
                        "type" : "string"
                      }
                    }
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "topics" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "integer"
                      },
                      "name" : {
                        "type" : "string"
                      },
                      "urlkey" : {
                        "type" : "string"
                      }
                    }
                  },
                  "urlname" : {
                    "type" : "string"
                  },
                  "who" : {
                    "type" : "string"
                  }
                }
              },
              "headcount" : {
                "type" : "string"
              },
              "how_to_find_us" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "is_simplehtml" : {
                "type" : "string"
              },
              "maybe_rsvp_count" : {
                "type" : "integer"
              },
              "name" : {
                "type" : "string"
              },
              "photo_album_id" : {
                "type" : "integer"
              },
              "photo_count" : {
                "type" : "integer"
              },
              "photo_url" : {
                "type" : "string"
              },
              "publish_status" : {
                "type" : "string"
              },
              "rating" : {
                "type" : "object",
                "properties" : {
                  "average" : {
                    "type" : "string"
                  },
                  "count" : {
                    "type" : "integer"
                  }
                }
              },
              "rsvp_alerts" : {
                "type" : "string"
              },
              "rsvp_limit" : {
                "type" : "string"
              },
              "rsvp_rules" : {
                "type" : "object",
                "properties" : {
                  "close_time" : {
                    "type" : "string"
                  },
                  "closed" : {
                    "type" : "string"
                  },
                  "guest_limit" : {
                    "type" : "string"
                  },
                  "open_time" : {
                    "type" : "string"
                  },
                  "refund_policy" : {
                    "type" : "object",
                    "properties" : {
                      "days" : {
                        "type" : "string"
                      },
                      "notes" : {
                        "type" : "integer"
                      },
                      "policies" : {
                        "type" : "string"
                      }
                    }
                  },
                  "waitlisting" : {
                    "type" : "string"
                  }
                }
              },
              "rsvpable" : {
                "type" : "string"
              },
              "self" : {
                "type" : "object",
                "properties" : {
                  "actions" : {
                    "type" : "string"
                  },
                  "checked_in" : {
                    "type" : "string"
                  },
                  "pay_status" : {
                    "type" : "string"
                  },
                  "rated" : {
                    "type" : "integer"
                  },
                  "role" : {
                    "type" : "string"
                  },
                  "rsvp" : {
                    "type" : "object",
                    "properties" : {
                      "answers" : {
                        "type" : "string"
                      },
                      "guests" : {
                        "type" : "string"
                      },
                      "response" : {
                        "type" : "string"
                      }
                    }
                  },
                  "watching" : {
                    "type" : "string"
                  }
                }
              },
              "short_link" : {
                "type" : "string"
              },
              "simple_html_description" : {
                "type" : "string"
              },
              "status" : {
                "type" : "string"
              },
              "survey_questions" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "question" : {
                    "type" : "string"
                  }
                }
              },
              "time" : {
                "type" : "integer"
              },
              "timezone" : {
                "type" : "string"
              },
              "trending_rank" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              },
              "utc_offset" : {
                "type" : "integer"
              },
              "venue" : {
                "type" : "object",
                "properties" : {
                  "address_1" : {
                    "type" : "string"
                  },
                  "address_2" : {
                    "type" : "string"
                  },
                  "address_3" : {
                    "type" : "string"
                  },
                  "city" : {
                    "type" : "string"
                  },
                  "state" : {
                    "type" : "integer"
                  },
                  "country" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "lat" : {
                    "type" : "number"
                  },
                  "lon" : {
                    "type" : "number"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "phone" : {
                    "type" : "integer"
                  },
                  "repinned" : {
                    "type" : "string"
                  },
                  "zip" : {
                    "type" : "string"
                  }
                }
              },
              "venue_visibility" : {
                "type" : "string"
              },
              "visibility" : {
                "type" : "string"
              },
              "why" : {
                "type" : "string"
              },
              "yes_rsvp_count" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "everywhereRsvp" : {
      "type" : "object",
      "properties" : {
        "created" : {
          "type" : "integer"
        },
        "event_id" : {
          "type" : "integer"
        },
        "id" : {
          "type" : "integer"
        },
        "member" : {
          "type" : "object",
          "properties" : {
            "member_city" : {
              "type" : "string"
            },
            "member_country" : {
              "type" : "string"
            },
            "member_id" : {
              "type" : "integer"
            },
            "member_state" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "member_photo" : {
          "type" : "object",
          "properties" : {
            "highres_link" : {
              "type" : "string"
            },
            "photo_id" : {
              "type" : "integer"
            },
            "photo_link" : {
              "type" : "string"
            },
            "thumb_link" : {
              "type" : "string"
            }
          }
        },
        "udf_{varname}" : {
          "type" : "string"
        }
      }
    },
    "everywhereContainer" : {
      "type" : "object",
      "properties" : {
        "countries" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer"
        },
        "description" : {
          "type" : "string"
        },
        "facebook_urlname" : {
          "type" : "string"
        },
        "founder" : {
          "type" : "object",
          "properties" : {
            "member_city" : {
              "type" : "string"
            },
            "member_country" : {
              "type" : "string"
            },
            "member_id" : {
              "type" : "integer"
            },
            "member_state" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "id" : {
          "type" : "integer"
        },
        "link" : {
          "type" : "string"
        },
        "link_name" : {
          "type" : "string"
        },
        "meetup_count" : {
          "type" : "integer"
        },
        "meetup_url" : {
          "type" : "string"
        },
        "member_count" : {
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "past_meetup_count" : {
          "type" : "integer"
        },
        "theme" : {
          "type" : "object",
          "properties" : {
            "banner_height" : {
              "type" : "string"
            },
            "banner_link" : {
              "type" : "string"
            },
            "boxback_color" : {
              "type" : "string"
            },
            "button_color" : {
              "type" : "string"
            },
            "link_color" : {
              "type" : "string"
            },
            "pageback_color" : {
              "type" : "string"
            }
          }
        },
        "twitter_urlname" : {
          "type" : "string"
        },
        "udf_{varname}" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "integer"
        },
        "urlname" : {
          "type" : "string"
        }
      }
    },
    "photo" : {
      "type" : "object",
      "properties" : {
        "album_id" : {
          "type" : "integer"
        },
        "created" : {
          "type" : "integer"
        },
        "event_photo_id" : {
          "type" : "integer"
        },
        "member" : {
          "type" : "object",
          "properties" : {
            "member_id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "photo_url" : {
          "type" : "string"
        },
        "site_link" : {
          "type" : "string"
        },
        "title" : {
          "type" : "integer"
        },
        "updated" : {
          "type" : "integer"
        }
      }
    },
    "groups" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "category" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "shortname" : {
                    "type" : "string"
                  }
                }
              },
              "city" : {
                "type" : "string"
              },
              "country" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "description" : {
                "type" : "string"
              },
              "ga_code" : {
                "type" : "string"
              },
              "group_photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "id" : {
                "type" : "integer"
              },
              "is_simplehtml" : {
                "type" : "string"
              },
              "join_info" : {
                "type" : "object",
                "properties" : {
                  "intro_required" : {
                    "type" : "string"
                  },
                  "photo_required" : {
                    "type" : "string"
                  },
                  "questions" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "integer"
                      },
                      "question" : {
                        "type" : "string"
                      }
                    }
                  },
                  "questions_req" : {
                    "type" : "string"
                  }
                }
              },
              "join_mode" : {
                "type" : "string"
              },
              "lat" : {
                "type" : "number"
              },
              "link" : {
                "type" : "string"
              },
              "list_addr" : {
                "type" : "string"
              },
              "list_mode" : {
                "type" : "string"
              },
              "lon" : {
                "type" : "number"
              },
              "members" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "next_event" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "time" : {
                    "type" : "integer"
                  }
                }
              },
              "organizer" : {
                "type" : "object",
                "properties" : {
                  "bio" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "photos" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "simple_html_description" : {
                "type" : "string"
              },
              "state" : {
                "type" : "integer"
              },
              "timezone" : {
                "type" : "string"
              },
              "urlname" : {
                "type" : "string"
              },
              "visibility" : {
                "type" : "string"
              },
              "who" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "everywhereEventSeed" : {
      "type" : "object",
      "properties" : {
        "container" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            }
          }
        },
        "created" : {
          "type" : "integer"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "integer"
        },
        "local_time" : {
          "type" : "integer"
        },
        "short_description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "udf_{varname}" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "integer"
        }
      }
    },
    "eventCommentLikes" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "created" : {
                "type" : "integer"
              },
              "event_comment_id" : {
                "type" : "integer"
              },
              "member" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "photo" : {
                    "type" : "object",
                    "properties" : {
                      "highres_link" : {
                        "type" : "string"
                      },
                      "photo_id" : {
                        "type" : "integer"
                      },
                      "photo_link" : {
                        "type" : "string"
                      },
                      "thumb_link" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "eventRating" : {
      "type" : "object",
      "properties" : {
        "event_id" : {
          "type" : "integer"
        },
        "group_id" : {
          "type" : "integer"
        },
        "rating" : {
          "type" : "string"
        },
        "rating_count" : {
          "type" : "integer"
        },
        "time" : {
          "type" : "string"
        }
      }
    },
    "deprecatedCheckins" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "checker" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "checkin_id" : {
                "type" : "integer"
              },
              "comment" : {
                "type" : "string"
              },
              "event_id" : {
                "type" : "integer"
              },
              "group_id" : {
                "type" : "integer"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "member_id" : {
                "type" : "integer"
              },
              "member_name" : {
                "type" : "string"
              },
              "time" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "venues" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "address_1" : {
                "type" : "string"
              },
              "address_2" : {
                "type" : "string"
              },
              "address_3" : {
                "type" : "string"
              },
              "city" : {
                "type" : "string"
              },
              "state" : {
                "type" : "integer"
              },
              "country" : {
                "type" : "string"
              },
              "distance" : {
                "type" : "number"
              },
              "email" : {
                "type" : "integer"
              },
              "fax" : {
                "type" : "string"
              },
              "id" : {
                "type" : "integer"
              },
              "lat" : {
                "type" : "number"
              },
              "lon" : {
                "type" : "number"
              },
              "name" : {
                "type" : "string"
              },
              "phone" : {
                "type" : "integer"
              },
              "rating" : {
                "type" : "string"
              },
              "rating_count" : {
                "type" : "integer"
              },
              "taglist" : {
                "type" : "string"
              },
              "venue_url" : {
                "type" : "string"
              },
              "zip" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "topicCategories" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "best_topics" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlkey" : {
                    "type" : "string"
                  }
                }
              },
              "category_ids" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "photo" : {
                "type" : "object",
                "properties" : {
                  "highres_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "shortname" : {
                "type" : "string"
              },
              "topic" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "urlkey" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "attendance" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "member" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "photo" : {
                    "type" : "object",
                    "properties" : {
                      "thumb" : {
                        "type" : "integer"
                      }
                    }
                  }
                }
              },
              "rsvp" : {
                "type" : "object",
                "properties" : {
                  "guests" : {
                    "type" : "string"
                  },
                  "response" : {
                    "type" : "string"
                  }
                }
              },
              "status" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "eventComments" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "comment" : {
                "type" : "string"
              },
              "comment_url" : {
                "type" : "string"
              },
              "event" : {
                "type" : "object",
                "properties" : {
                  "event_url" : {
                    "type" : "string"
                  },
                  "id" : {
                    "type" : "integer"
                  },
                  "name" : {
                    "type" : "string"
                  },
                  "time" : {
                    "type" : "integer"
                  }
                }
              },
              "event_comment_id" : {
                "type" : "integer"
              },
              "event_diff_id" : {
                "type" : "integer"
              },
              "event_id" : {
                "type" : "integer"
              },
              "group_id" : {
                "type" : "integer"
              },
              "in_reply_to" : {
                "type" : "integer"
              },
              "like_count" : {
                "type" : "integer"
              },
              "member_id" : {
                "type" : "integer"
              },
              "member_name" : {
                "type" : "string"
              },
              "member_photo" : {
                "type" : "object",
                "properties" : {
                  "hires_link" : {
                    "type" : "string"
                  },
                  "photo_id" : {
                    "type" : "integer"
                  },
                  "photo_link" : {
                    "type" : "string"
                  },
                  "thumb_link" : {
                    "type" : "string"
                  }
                }
              },
              "notifications" : {
                "type" : "string"
              },
              "self" : {
                "type" : "object",
                "properties" : {
                  "actions" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "everywhereFollow" : {
      "type" : "object",
      "properties" : {
        "community" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            }
          }
        },
        "container" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer"
            },
            "name" : {
              "type" : "string"
            },
            "urlname" : {
              "type" : "string"
            }
          }
        },
        "created" : {
          "type" : "integer"
        },
        "id" : {
          "type" : "integer"
        },
        "member" : {
          "type" : "object",
          "properties" : {
            "member_city" : {
              "type" : "string"
            },
            "member_country" : {
              "type" : "string"
            },
            "member_id" : {
              "type" : "integer"
            },
            "member_state" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "status" : {
          "type" : "string"
        },
        "udf_{varname}" : {
          "type" : "string"
        }
      }
    },
    "everywhereContainers" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "countries" : {
                "type" : "string"
              },
              "created" : {
                "type" : "integer"
              },
              "description" : {
                "type" : "string"
              },
              "facebook_urlname" : {
                "type" : "string"
              },
              "founder" : {
                "type" : "object",
                "properties" : {
                  "member_city" : {
                    "type" : "string"
                  },
                  "member_country" : {
                    "type" : "string"
                  },
                  "member_id" : {
                    "type" : "integer"
                  },
                  "member_state" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                }
              },
              "id" : {
                "type" : "integer"
              },
              "link" : {
                "type" : "string"
              },
              "link_name" : {
                "type" : "string"
              },
              "meetup_count" : {
                "type" : "integer"
              },
              "meetup_url" : {
                "type" : "string"
              },
              "member_count" : {
                "type" : "integer"
              },
              "name" : {
                "type" : "string"
              },
              "past_meetup_count" : {
                "type" : "integer"
              },
              "theme" : {
                "type" : "object",
                "properties" : {
                  "banner_height" : {
                    "type" : "string"
                  },
                  "banner_link" : {
                    "type" : "string"
                  },
                  "boxback_color" : {
                    "type" : "string"
                  },
                  "button_color" : {
                    "type" : "string"
                  },
                  "link_color" : {
                    "type" : "string"
                  },
                  "pageback_color" : {
                    "type" : "string"
                  }
                }
              },
              "twitter_urlname" : {
                "type" : "string"
              },
              "udf_{varname}" : {
                "type" : "string"
              },
              "updated" : {
                "type" : "integer"
              },
              "urlname" : {
                "type" : "string"
              }
            }
          }
        }
      }
    }
  }
}